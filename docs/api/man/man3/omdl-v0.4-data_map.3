.TH "data_map" 3 "Thu Feb 2 2017" "Version v0.4" "omdl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
data_map \- Map
.PP
Mapped data access via key-value pairs\&.  

.SS "Files"

.in +1c
.ti -1c
.RI "file \fBmap\&.scad\fP"
.br
.RI "\fIMapped key-value pair data access\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "function \fBmap_get_idx\fP (map, key)"
.br
.RI "\fIReturn the index for the storage location of a map key-value pair\&. \fP"
.ti -1c
.RI "function \fBmap_exists\fP (map, key)"
.br
.RI "\fITest if a key exists in a map\&. \fP"
.ti -1c
.RI "function \fBmap_get\fP (map, key)"
.br
.RI "\fIGet the value associated with a map key\&. \fP"
.ti -1c
.RI "function \fBmap_get_keys\fP (map)"
.br
.RI "\fIGet a vector of the map entry identifier keys\&. \fP"
.ti -1c
.RI "function \fBmap_get_values\fP (map)"
.br
.RI "\fIGet a vector of the map entry values\&. \fP"
.ti -1c
.RI "function \fBmap_size\fP (map)"
.br
.RI "\fIGet the number of key-value pairs stored in a map\&. \fP"
.ti -1c
.RI "module \fBmap_check\fP (map, verbose=false)"
.br
.RI "\fIPerform some basic validation/checks on a map\&. \fP"
.ti -1c
.RI "module \fBmap_dump\fP (map, sort=true, number=true, p=3)"
.br
.RI "\fIDump each map key-value pair to the console\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Mapped data access via key-value pairs\&. 

\fBExample\fP 
.PP
 
.PP
.nf
    use <map\&.scad>;

    map =
    [
      ["part1",       ["screw10", [10, 11, 13]]],
      ["part2",       ["screw12", [20, 21, 30]]],
      ["part3",       ["screw10", [10, 10, -12]]],
      ["config",      ["top", "front", "rear"]],
      ["version",     [21, 5, 0]],
      ["runid",       10]
    ];

    map_check(map, true);

    echo( str("is part0 = ", map_exists(map, "part0")) );
    echo( str("is part1 = ", map_exists(map, "part1")) );

    p1 = map_get(map, "part1");
    echo( c=second(p1) );

    keys=map_get_keys(map);
    parts = delete(keys, mv=["config", "version", "runid"]);

    for ( p = parts )
      echo
      (
        n=p,
        p=first(map_get(map, p)),
        l=second(map_get(map, p))
      );

    map_dump(map);

.fi
.PP
.PP
\fBResult\fP 
.PP
.nf
1 ECHO: "[ INFO ] map_check(); begin map check"
2 ECHO: "[ INFO ] map_check(); checking map format and keys\&."
3 ECHO: "[ INFO ] map_check(); map size: 6 entries\&."
4 ECHO: "[ INFO ] map_check(); end map check"
5 ECHO: "is part0 = false"
6 ECHO: "is part1 = true"
7 ECHO: c = [10, 11, 13]
8 ECHO: n = "part1", p = "screw10", l = [10, 11, 13]
9 ECHO: n = "part2", p = "screw12", l = [20, 21, 30]
10 ECHO: n = "part3", p = "screw10", l = [10, 10, -12]
11 ECHO: "003:   'config' = '["top", "front", "rear"]'"
12 ECHO: "000:    'part1' = '["screw10", [10, 11, 13]]'"
13 ECHO: "001:    'part2' = '["screw12", [20, 21, 30]]'"
14 ECHO: "002:    'part3' = '["screw10", [10, 10, -12]]'"
15 ECHO: "005:    'runid' = '10'"
16 ECHO: "004:  'version' = '[21, 5, 0]'"
17 ECHO: "map size: 6 entries\&."

.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "module map_check (map, verbose = \fCfalse\fP)"

.PP
Perform some basic validation/checks on a map\&. 
.PP
\fBParameters:\fP
.RS 4
\fImap\fP <2d-vector> A two dimensional vector (2-tuple x n-tuple) containing an associative map with n elements\&.
.br
\fIverbose\fP <boolean> Be verbose during check\&.
.RE
.PP
Check that: (1) each entry has key-value 2-tuple, (2) each key is a string, and (3) key identifiers are unique\&. 
.PP
Definition at line 169 of file map\&.scad\&.
.SS "module map_dump (map, sort = \fCtrue\fP, number = \fCtrue\fP, p = \fC3\fP)"

.PP
Dump each map key-value pair to the console\&. 
.PP
\fBParameters:\fP
.RS 4
\fImap\fP <2d-vector> A two dimensional vector (2-tuple x n-tuple) containing an associative map with n elements\&.
.br
\fIsort\fP <boolean> Sort the output by key\&. 
.br
\fInumber\fP <boolean> Output index number\&. 
.br
\fIp\fP <integer> Number of places for zero-padded numbering\&. 
.RE
.PP

.PP
Definition at line 245 of file map\&.scad\&.
.SS "function map_exists (map, key)"

.PP
Test if a key exists in a map\&. 
.PP
\fBParameters:\fP
.RS 4
\fImap\fP <2d-vector> A two dimensional vector (2-tuple x n-tuple) containing an associative map with n elements\&. 
.br
\fIkey\fP <string> A map entry identifier\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<boolean> \fBtrue\fP when the key exists and \fBfalse\fP otherwise\&. 
.RE
.PP

.SS "function map_get (map, key)"

.PP
Get the value associated with a map key\&. 
.PP
\fBParameters:\fP
.RS 4
\fImap\fP <2d-vector> A two dimensional vector (2-tuple x n-tuple) containing an associative map with n elements\&. 
.br
\fIkey\fP <string> A map entry identifier\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The map value associated with \fCkey\fP\&. Returns \fBundef\fP if \fCkey\fP does not exists\&. 
.RE
.PP

.SS "function map_get_idx (map, key)"

.PP
Return the index for the storage location of a map key-value pair\&. 
.PP
\fBParameters:\fP
.RS 4
\fImap\fP <2d-vector> A two dimensional vector (2-tuple x n-tuple) containing an associative map with n elements\&. 
.br
\fIkey\fP <string> A map entry identifier\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer> The index of the value associated \fCkey\fP in the map\&. Returns \fBundef\fP if \fCkey\fP is not a string or does not exists\&. 
.RE
.PP

.SS "function map_get_keys (map)"

.PP
Get a vector of the map entry identifier keys\&. 
.PP
\fBParameters:\fP
.RS 4
\fImap\fP <2d-vector> A two dimensional vector (2-tuple x n-tuple) containing an associative map with n elements\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<vector> A vector of keys that exist in the associative map\&.
.RE
.PP
\fBNote:\fP
.RS 4
Uses function \fBeselect\fP to select the first column of the vector defining the map\&. 
.RE
.PP

.SS "function map_get_values (map)"

.PP
Get a vector of the map entry values\&. 
.PP
\fBParameters:\fP
.RS 4
\fImap\fP <2d-vector> A two dimensional vector (2-tuple x n-tuple) containing an associative map with n elements\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<vector> A vector of values stored in the associative map\&.
.RE
.PP
\fBNote:\fP
.RS 4
Uses function \fBeselect\fP to select the last column of the vector defining the map\&. 
.RE
.PP

.SS "function map_size (map)"

.PP
Get the number of key-value pairs stored in a map\&. 
.PP
\fBParameters:\fP
.RS 4
\fImap\fP <2d-vector> A two dimensional vector (2-tuple x n-tuple) containing an associative map with n elements\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer> The number of key-value pairs stored in the map\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for omdl from the source code\&.
