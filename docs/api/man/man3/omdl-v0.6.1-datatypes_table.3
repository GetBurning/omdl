.TH "datatypes_table" 3 "Fri Apr 7 2017" "Version v0.6.1" "omdl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
datatypes_table \- Tables
.PP
Table data type operations\&.  

.SS "Files"

.in +1c
.ti -1c
.RI "file \fBdatatypes_table\&.scad\fP"
.br
.RI "\fITable data type operations\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "function \fBget_table_ri\fP (r, ri)"
.br
.RI "\fIGet the table row index that matches a table row identifier\&. \fP"
.ti -1c
.RI "function \fBget_table_r\fP (r, ri)"
.br
.RI "\fIGet the table row that matches a table row identifier\&. \fP"
.ti -1c
.RI "function \fBget_table_ci\fP (c, ci)"
.br
.RI "\fIGet the table column index that matches a table column identifier\&. \fP"
.ti -1c
.RI "function \fBget_table_c\fP (c, ci)"
.br
.RI "\fIGet the table column that matches a table column identifier\&. \fP"
.ti -1c
.RI "function \fBget_table_v\fP (r, c, ri, ci)"
.br
.RI "\fIGet the table cell value for a specified row and column identifier\&. \fP"
.ti -1c
.RI "function \fBget_table_crl\fP (r, c, ci)"
.br
.RI "\fIForm a list of a select column across all table rows\&. \fP"
.ti -1c
.RI "function \fBget_table_ridl\fP (r)"
.br
.RI "\fIForm a list of all table row identifiers\&. \fP"
.ti -1c
.RI "function \fBget_table_cidl\fP (c)"
.br
.RI "\fIForm a list of all table column identifiers\&. \fP"
.ti -1c
.RI "function \fBtable_exists\fP (r, c, ri, ci)"
.br
.RI "\fITest the existence of a table row and column identifier\&. \fP"
.ti -1c
.RI "function \fBget_table_size\fP (r, c)"
.br
.RI "\fIGet the size of a table\&. \fP"
.ti -1c
.RI "function \fBget_table_copy\fP (r, c, rl, cl)"
.br
.RI "\fICreate a new matrix from select rows and columns of a table\&. \fP"
.ti -1c
.RI "function \fBget_table_sum\fP (r, c, rl, cl)"
.br
.RI "\fISum select rows and columns of a table\&. \fP"
.ti -1c
.RI "module \fBtable_check\fP (r, c, verbose=false)"
.br
.RI "\fIPerform some basic validation/checks on a table\&. \fP"
.ti -1c
.RI "module \fBtable_dump\fP (r, c, rl, cl, number=true)"
.br
.RI "\fIDump a table to the console\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Table data type operations\&. 

\fBExample\fP 
.PP
 
.PP
.nf

.fi
.PP
.PP
\fBResult\fP 
.PP
.nf
1 ECHO: "[ INFO ] table_check(); begin table check"
2 ECHO: "[ INFO ] table_check(); row identifier found at column zero\&."
3 ECHO: "[ INFO ] table_check(); checking row column counts\&."
4 ECHO: "[ INFO ] table_check(); checking for repeat column identifiers\&."
5 ECHO: "[ INFO ] table_check(); checking for repeat row identifiers\&."
6 ECHO: "[ INFO ] table_check(); table size: 4 rows by 8 columns\&."
7 ECHO: "[ INFO ] table_check(); end table check"
8 ECHO: ""
9 ECHO: "row: 0"
10 ECHO: "[m3r08r] [id] (row identifier)             = [m3r08r]"
11 ECHO: "[m3r08r] [ht] (head type [r|h|s])          = [r]"
12 ECHO: "[m3r08r] [td] (thread diameter)            = [3]"
13 ECHO: "[m3r08r] [tl] (thread length)              = [8]"
14 ECHO: "[m3r08r] [hd] (head diameter)              = [5\&.5]"
15 ECHO: "[m3r08r] [hl] (head length)                = [3]"
16 ECHO: "[m3r08r] [nd] (hex nut flat-to-flat width) = [5\&.5]"
17 ECHO: "[m3r08r] [nl] (hex nut length)             = [25\&.4]"
18 ECHO: ""
19 ECHO: "row: 1"
20 ECHO: "[m3r14r] [id] (row identifier)             = [m3r14r]"
21 ECHO: "[m3r14r] [ht] (head type [r|h|s])          = [r]"
22 ECHO: "[m3r14r] [td] (thread diameter)            = [3]"
23 ECHO: "[m3r14r] [tl] (thread length)              = [14]"
24 ECHO: "[m3r14r] [hd] (head diameter)              = [5\&.5]"
25 ECHO: "[m3r14r] [hl] (head length)                = [3]"
26 ECHO: "[m3r14r] [nd] (hex nut flat-to-flat width) = [5\&.5]"
27 ECHO: "[m3r14r] [nl] (hex nut length)             = [31\&.75]"
28 ECHO: ""
29 ECHO: "row: 2"
30 ECHO: "[m3r16r] [id] (row identifier)             = [m3r16r]"
31 ECHO: "[m3r16r] [ht] (head type [r|h|s])          = [r]"
32 ECHO: "[m3r16r] [td] (thread diameter)            = [3]"
33 ECHO: "[m3r16r] [tl] (thread length)              = [16]"
34 ECHO: "[m3r16r] [hd] (head diameter)              = [5\&.5]"
35 ECHO: "[m3r16r] [hl] (head length)                = [3]"
36 ECHO: "[m3r16r] [nd] (hex nut flat-to-flat width) = [5\&.5]"
37 ECHO: "[m3r16r] [nl] (hex nut length)             = [38\&.1]"
38 ECHO: ""
39 ECHO: "row: 3"
40 ECHO: "[m3r20r] [id] (row identifier)             = [m3r20r]"
41 ECHO: "[m3r20r] [ht] (head type [r|h|s])          = [r]"
42 ECHO: "[m3r20r] [td] (thread diameter)            = [3]"
43 ECHO: "[m3r20r] [tl] (thread length)              = [20]"
44 ECHO: "[m3r20r] [hd] (head diameter)              = [5\&.5]"
45 ECHO: "[m3r20r] [hl] (head length)                = [3]"
46 ECHO: "[m3r20r] [nd] (hex nut flat-to-flat width) = [5\&.5]"
47 ECHO: "[m3r20r] [nl] (hex nut length)             = [44\&.45]"
48 ECHO: ""
49 ECHO: "table size: 4 rows by 8 columns\&."
50 ECHO: "metric 'nl' available"
51 ECHO: table_ids = ["m3r08r", "m3r14r", "m3r16r", "m3r20r"]
52 ECHO: table_cols_tl = [8, 14, 16, 20]
53 ECHO: m3r16r_tl = 16
54 ECHO: tnew = [[8, 25\&.4], [14, 31\&.75], [16, 38\&.1], [20, 44\&.45]]
55 ECHO: tsum = [58, 139\&.7]

.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "function get_table_c (c, ci)"

.PP
Get the table column that matches a table column identifier\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <matrix-2xC> The table column matrix (2 x C-columns)\&. 
.br
\fIci\fP <string> The column identifier\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list-2> The table column where the column identifier exists\&. If the identifier does not exists, returns \fBundef\fP\&. 
.RE
.PP

.SS "function get_table_ci (c, ci)"

.PP
Get the table column index that matches a table column identifier\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <matrix-2xC> The table column matrix (2 x C-columns)\&. 
.br
\fIci\fP <string> The column identifier\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer> The column index where the identifier exists\&. If the identifier does not exists, returns \fBempty_lst\fP\&. 
.RE
.PP

.SS "function get_table_cidl (c)"

.PP
Form a list of all table column identifiers\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <matrix-2xC> The table column matrix (2 x C-columns)\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> The list of all column identifiers\&.
.RE
.PP
\fBNote:\fP
.RS 4
This functions assumes the first element of each table column to be the column identifier\&. 
.RE
.PP

.SS "function get_table_copy (r, c, rl, cl)"

.PP
Create a new matrix from select rows and columns of a table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP <matrix-CxR> The table data matrix (C-columns x R-rows)\&. 
.br
\fIc\fP <matrix-2xC> The table column matrix (2 x C-columns)\&. 
.br
\fIrl\fP <string-list> A list of selected row identifiers\&. 
.br
\fIcl\fP <string-list> A list of selected column identifiers\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<matrix> A matrix of the selected rows and columns\&. 
.RE
.PP

.SS "function get_table_crl (r, c, ci)"

.PP
Form a list of a select column across all table rows\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP <matrix-CxR> The table data matrix (C-columns x R-rows)\&. 
.br
\fIc\fP <matrix-2xC> The table column matrix (2 x C-columns)\&. 
.br
\fIci\fP <string> The column identifier\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> The list of a select column across all rows\&. If the identifier does not exists, returns \fBundef\fP\&. 
.RE
.PP

.SS "function get_table_r (r, ri)"

.PP
Get the table row that matches a table row identifier\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP <matrix-CxR> The table data matrix (C-columns x R-rows)\&. 
.br
\fIri\fP <string> The row identifier\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list-C> The table row where the row identifier exists\&. If the identifier does not exists, returns \fBundef\fP\&. 
.RE
.PP

.SS "function get_table_ri (r, ri)"

.PP
Get the table row index that matches a table row identifier\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP <matrix-CxR> The table data matrix (C-columns x R-rows)\&. 
.br
\fIri\fP <string> The row identifier\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer> The row index where the identifier exists\&. If the identifier does not exists, returns \fBempty_lst\fP\&. 
.RE
.PP

.SS "function get_table_ridl (r)"

.PP
Form a list of all table row identifiers\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP <matrix-CxR> The table data matrix (C-columns x R-rows)\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> The list of all row identifiers\&.
.RE
.PP
\fBNote:\fP
.RS 4
This functions assumes the first element of each table row to be the row identifier, as enforced by the \fBtable_check()\fP\&. As an alternative, the function \fBget_table_crl()\fP, of the form get_table_crl(r, c, 'id'), may be used without this assumption\&. 
.RE
.PP

.SS "function get_table_size (r, c)"

.PP
Get the size of a table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP <matrix-CxR> The table data matrix (C-columns x R-rows)\&. 
.br
\fIc\fP <matrix-2xC> The table column matrix (2 x C-columns)\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The table size\&.
.RE
.PP
The size is reported as: (1) The number of rows when only the \fCr\fP parameter is specified\&. (2) The number of columns when only the \fCc\fP parameter is specified\&. (3) The (r * columns) when both parameters are specified\&. 
.SS "function get_table_sum (r, c, rl, cl)"

.PP
Sum select rows and columns of a table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP <matrix-CxR> The table data matrix (C-columns x R-rows)\&. 
.br
\fIc\fP <matrix-2xC> The table column matrix (2 x C-columns)\&. 
.br
\fIrl\fP <string-list> A list of selected row identifiers\&. 
.br
\fIcl\fP <string-list> A list of selected column identifiers\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list with the sum of each selected rows and columns\&. 
.RE
.PP

.SS "function get_table_v (r, c, ri, ci)"

.PP
Get the table cell value for a specified row and column identifier\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP <matrix-CxR> The table data matrix (C-columns x R-rows)\&. 
.br
\fIc\fP <matrix-2xC> The table column matrix (2 x C-columns)\&. 
.br
\fIri\fP <string> The row identifier\&. 
.br
\fIci\fP <string> The column identifier\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<value> The value of the matrix cell [ri, ci]\&. If either identifier does not exists, returns \fBundef\fP\&. 
.RE
.PP

.SS "module table_check (r, c, verbose = \fCfalse\fP)"

.PP
Perform some basic validation/checks on a table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP <matrix-CxR> The table data matrix (C-columns x R-rows)\&. 
.br
\fIc\fP <matrix-2xC> The table column matrix (2 x C-columns)\&. 
.br
\fIverbose\fP <boolean> Be verbose during check\&.
.RE
.PP
Check that: (1) the first table column identifier is 'id'\&. (2) Make sure that each row has the same number of columns as defined in the columns vector\&. (3) Make sure that there are no repeating column identifiers\&. (4) Make sure that there are no repeating row identifiers\&. 
.PP
Definition at line 297 of file datatypes_table\&.scad\&.
.SS "module table_dump (r, c, rl, cl, number = \fCtrue\fP)"

.PP
Dump a table to the console\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP <matrix-CxR> The table data matrix (C-columns x R-rows)\&. 
.br
\fIc\fP <matrix-2xC> The table column matrix (2 x C-columns)\&. 
.br
\fIrl\fP <string-list> A list of selected row identifiers\&. 
.br
\fIcl\fP <string-list> A list of selected column identifiers\&. 
.br
\fInumber\fP <boolean> Number the table rows\&.
.RE
.PP
Output each table row to the console\&. To output only select rows and columns, assign the desired identifiers to \fCrl\fP and \fCcl\fP\&. For example to output only the column identifiers 'c1' and 'c2', assign \fCcl = ['c1', 'c2']\fP\&. 
.PP
Definition at line 377 of file datatypes_table\&.scad\&.
.SS "function table_exists (r, c, ri, ci)"

.PP
Test the existence of a table row and column identifier\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP <matrix-CxR> The table data matrix (C-columns x R-rows)\&. 
.br
\fIc\fP <matrix-2xC> The table column matrix (2 x C-columns)\&. 
.br
\fIri\fP <string> The row identifier\&. 
.br
\fIci\fP <string> The column identifier\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBtrue\fP if the row and column identifier exists, and \fBfalse\fP otherwise\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for omdl from the source code\&.
