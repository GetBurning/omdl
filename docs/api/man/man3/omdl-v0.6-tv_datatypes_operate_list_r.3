.TH "tv_datatypes_operate_list_r" 3 "Tue Apr 4 2017" "Version v0.6" "omdl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tv_datatypes_operate_list_r \- Results 

.PP
.nf
1 ECHO: "OpenSCAD Version [2017, 2, 19]"
2 ECHO: "[ INFO ] run_test(); t01 passed: 'lstr(undef)=undef'"
3 ECHO: "[ INFO ] run_test(); t02 passed: 'lstr([])='"
4 ECHO: "[ INFO ] run_test(); t03 passed: 'lstr([0 : 0\&.5 : 9])=[0 : 0\&.5 : 9]'"
5 ECHO: "[ INFO ] run_test(); t04 passed: 'lstr(A string)=A string'"
6 ECHO: "[ INFO ] run_test(); t05 passed: 'lstr(["orange", "apple", "grape", "banana"])=orangeapplegrapebanana'"
7 ECHO: "[ INFO ] run_test(); t06 passed: 'lstr(["b", "a", "n", "a", "n", "a", "s"])=bananas'"
8 ECHO: "[ INFO ] run_test(); t07 passed: 'lstr([undef])=undef'"
9 ECHO: "[ INFO ] run_test(); t08 passed: 'lstr([[1, 2], [2, 3]])=[1, 2][2, 3]'"
10 ECHO: "[ INFO ] run_test(); t09 passed: 'lstr(["ab", [1, 2], [2, 3], [4, 5]])=ab[1, 2][2, 3][4, 5]'"
11 ECHO: "[ INFO ] run_test(); t10 passed: 'lstr([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[1, 2, 3][4, 5, 6][7, 8, 9]["a", "b", "c"]'"
12 ECHO: "[ INFO ] run_test(); t11 passed: 'lstr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=0123456789101112131415'"
13 ECHO: "[ INFO ] run_test(); t01 passed: 'lstr_html_B(undef)=<b>undef</b>'"
14 ECHO: "[ INFO ] run_test(); t02 passed: 'lstr_html_B([])='"
15 ECHO: "[ INFO ] run_test(); t03 passed: 'lstr_html_B([0 : 0\&.5 : 9])=<b>[0 : 0\&.5 : 9]</b>'"
16 ECHO: "[ INFO ] run_test(); t04 passed: 'lstr_html_B(A string)=<b>A string</b>'"
17 ECHO: "[ INFO ] run_test(); t05 passed: 'lstr_html_B(["orange", "apple", "grape", "banana"])=<b>orange</b><b>apple</b><b>grape</b><b>banana</b>'"
18 ECHO: "[ INFO ] run_test(); t06 passed: 'lstr_html_B(["b", "a", "n", "a", "n", "a", "s"])=<b>b</b><b>a</b><b>n</b><b>a</b><b>n</b><b>a</b><b>s</b>'"
19 ECHO: "[ INFO ] run_test(); t07 passed: 'lstr_html_B([undef])=<b>undef</b>'"
20 ECHO: "[ INFO ] run_test(); t08 passed: 'lstr_html_B([[1, 2], [2, 3]])=<b>[1, 2]</b><b>[2, 3]</b>'"
21 ECHO: "[ INFO ] run_test(); t09 passed: 'lstr_html_B(["ab", [1, 2], [2, 3], [4, 5]])=<b>ab</b><b>[1, 2]</b><b>[2, 3]</b><b>[4, 5]</b>'"
22 ECHO: "[ INFO ] run_test(); t10 passed: 'lstr_html_B([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=<b>[1, 2, 3]</b><b>[4, 5, 6]</b><b>[7, 8, 9]</b><b>["a", "b", "c"]</b>'"
23 ECHO: "[ INFO ] run_test(); t11 passed: 'lstr_html_B([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=<b>0</b><b>1</b><b>2</b><b>3</b><b>4</b><b>5</b><b>6</b><b>7</b><b>8</b><b>9</b><b>10</b><b>11</b><b>12</b><b>13</b><b>14</b><b>15</b>'"
24 ECHO: "[ INFO ] run_test(); t01 passed: 'consts(undef)=[]'"
25 ECHO: "[ INFO ] run_test(); t02 passed: 'consts([])=[]'"
26 ECHO: "[ INFO ] run_test(); t03 passed: 'consts([0 : 0\&.5 : 9])=[]'"
27 ECHO: "[ INFO ] run_test(); t04 passed: 'consts(A string)=[]'"
28 ECHO: "[ INFO ] run_test(); t05 passed: 'consts(["orange", "apple", "grape", "banana"])=[]'"
29 ECHO: "[ INFO ] run_test(); t06 passed: 'consts(["b", "a", "n", "a", "n", "a", "s"])=[]'"
30 ECHO: "[ INFO ] run_test(); t07 passed: 'consts([undef])=[]'"
31 ECHO: "[ INFO ] run_test(); t08 passed: 'consts([[1, 2], [2, 3]])=[]'"
32 ECHO: "[ INFO ] run_test(); t09 passed: 'consts(["ab", [1, 2], [2, 3], [4, 5]])=[]'"
33 ECHO: "[ INFO ] run_test(); t10 passed: 'consts([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[]'"
34 ECHO: "[ INFO ] run_test(); t11 passed: 'consts([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=[]'"
35 ECHO: "[ INFO ] run_test(); t01 passed: 'get_index(undef)=[]'"
36 ECHO: "[ INFO ] run_test(); t02 passed: 'get_index([])=[]'"
37 ECHO: "[ INFO ] run_test(); t03 passed: 'get_index([0 : 0\&.5 : 9])=[]'"
38 ECHO: "[ INFO ] run_test(); t04 passed: 'get_index(A string)=[0, 1, 2, 3, 4, 5, 6, 7]'"
39 ECHO: "[ INFO ] run_test(); t05 passed: 'get_index(["orange", "apple", "grape", "banana"])=[0, 1, 2, 3]'"
40 ECHO: "[ INFO ] run_test(); t06 passed: 'get_index(["b", "a", "n", "a", "n", "a", "s"])=[0, 1, 2, 3, 4, 5, 6]'"
41 ECHO: "[ INFO ] run_test(); t07 passed: 'get_index([undef])=[0]'"
42 ECHO: "[ INFO ] run_test(); t08 passed: 'get_index([[1, 2], [2, 3]])=[0, 1]'"
43 ECHO: "[ INFO ] run_test(); t09 passed: 'get_index(["ab", [1, 2], [2, 3], [4, 5]])=[0, 1, 2, 3]'"
44 ECHO: "[ INFO ] run_test(); t10 passed: 'get_index([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[0, 1, 2, 3]'"
45 ECHO: "[ INFO ] run_test(); t11 passed: 'get_index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]'"
46 ECHO: "[ INFO ] run_test(); t01 passed: 'pad_9(undef)=[undef, 0, 0, 0, 0, 0, 0, 0, 0]'"
47 ECHO: "[ INFO ] run_test(); t02 passed: 'pad_9([])=[0, 0, 0, 0, 0, 0, 0, 0, 0]'"
48 ECHO: "[ INFO ] run_test(); t03 passed: 'pad_9([0 : 0\&.5 : 9])=[[0 : 0\&.5 : 9], 0, 0, 0, 0, 0, 0, 0, 0]'"
49 ECHO: "[ INFO ] run_test(); t04 passed: 'pad_9(A string)=["A string", 0]'"
50 ECHO: "[ INFO ] run_test(); t05 passed: 'pad_9(["orange", "apple", "grape", "banana"])=["orange", "apple", "grape", "banana", 0, 0, 0, 0, 0]'"
51 ECHO: "[ INFO ] run_test(); t06 passed: 'pad_9(["b", "a", "n", "a", "n", "a", "s"])=["b", "a", "n", "a", "n", "a", "s", 0, 0]'"
52 ECHO: "[ INFO ] run_test(); t07 passed: 'pad_9([undef])=[undef, 0, 0, 0, 0, 0, 0, 0, 0]'"
53 ECHO: "[ INFO ] run_test(); t08 passed: 'pad_9([[1, 2], [2, 3]])=[[1, 2], [2, 3], 0, 0, 0, 0, 0, 0, 0]'"
54 ECHO: "[ INFO ] run_test(); t09 passed: 'pad_9(["ab", [1, 2], [2, 3], [4, 5]])=["ab", [1, 2], [2, 3], [4, 5], 0, 0, 0, 0, 0]'"
55 ECHO: "[ INFO ] run_test(); t10 passed: 'pad_9([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"], 0, 0, 0, 0, 0]'"
56 ECHO: "[ INFO ] run_test(); t11 passed: 'pad_9([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]'"
57 ECHO: "[ INFO ] root(); not testing: dround()"
58 ECHO: "[ INFO ] root(); not testing: sround()"
59 ECHO: "[ INFO ] run_test(); t01 passed: 'limit_12(undef)=undef'"
60 ECHO: "[ INFO ] run_test(); t02 passed: 'limit_12([])=[]'"
61 ECHO: "[ INFO ] run_test(); t03 passed: 'limit_12([0 : 0\&.5 : 9])=[0 : 0\&.5 : 9]'"
62 ECHO: "[ INFO ] run_test(); t04 passed: 'limit_12(A string)=A string'"
63 ECHO: "[ INFO ] run_test(); t05 passed: 'limit_12(["orange", "apple", "grape", "banana"])=["orange", "apple", "grape", "banana"]'"
64 ECHO: "[ INFO ] run_test(); t06 passed: 'limit_12(["b", "a", "n", "a", "n", "a", "s"])=["b", "a", "n", "a", "n", "a", "s"]'"
65 ECHO: "[ INFO ] run_test(); t07 passed: 'limit_12([undef])=[undef]'"
66 ECHO: "[ INFO ] run_test(); t08 passed: 'limit_12([[1, 2], [2, 3]])=[[1, 2], [2, 2]]'"
67 ECHO: "[ INFO ] run_test(); t09 passed: 'limit_12(["ab", [1, 2], [2, 3], [4, 5]])=["ab", [1, 2], [2, 2], [2, 2]]'"
68 ECHO: "[ INFO ] run_test(); t10 passed: 'limit_12([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[[1, 2, 2], [2, 2, 2], [2, 2, 2], ["a", "b", "c"]]'"
69 ECHO: "[ INFO ] run_test(); t11 passed: 'limit_12([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=[1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]'"
70 ECHO: "[ INFO ] run_test(); t01 passed: 'sum(undef)=undef'"
71 ECHO: "[ INFO ] run_test(); t02 passed: 'sum([])=0'"
72 ECHO: "[ INFO ] run_test(); t03 passed: 'sum([0 : 0\&.5 : 9])=85\&.5'"
73 ECHO: "[ INFO ] run_test(); t04 passed: 'sum(A string)=undef'"
74 ECHO: "[ INFO ] run_test(); t05 passed: 'sum(["orange", "apple", "grape", "banana"])=undef'"
75 ECHO: "[ INFO ] run_test(); t06 passed: 'sum(["b", "a", "n", "a", "n", "a", "s"])=undef'"
76 ECHO: "[ INFO ] run_test(); t07 passed: 'sum([undef])=undef'"
77 ECHO: "[ INFO ] run_test(); t08 passed: 'sum([[1, 2], [2, 3]])=[3, 5]'"
78 ECHO: "[ INFO ] run_test(); t09 passed: 'sum(["ab", [1, 2], [2, 3], [4, 5]])=undef'"
79 ECHO: "[ INFO ] run_test(); t10 passed: 'sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[undef, undef, undef]'"
80 ECHO: "[ INFO ] run_test(); t11 passed: 'sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=120'"
81 ECHO: "[ INFO ] run_test(); t01 passed: 'mean(undef)=undef'"
82 ECHO: "[ INFO ] run_test(); t02 passed: 'mean([])=0'"
83 ECHO: "[ INFO ] run_test(); t03 passed: 'mean([0 : 0\&.5 : 9])=4\&.5'"
84 ECHO: "[ INFO ] run_test(); t04 passed: 'mean(A string)=undef'"
85 ECHO: "[ INFO ] run_test(); t05 passed: 'mean(["orange", "apple", "grape", "banana"])=undef'"
86 ECHO: "[ INFO ] run_test(); t06 passed: 'mean(["b", "a", "n", "a", "n", "a", "s"])=undef'"
87 ECHO: "[ INFO ] run_test(); t07 passed: 'mean([undef])=undef'"
88 ECHO: "[ INFO ] run_test(); t08 passed: 'mean([[1, 2], [2, 3]])=[1\&.5, 2\&.5]'"
89 ECHO: "[ INFO ] run_test(); t09 passed: 'mean(["ab", [1, 2], [2, 3], [4, 5]])=undef'"
90 ECHO: "[ INFO ] run_test(); t10 passed: 'mean([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[undef, undef, undef]'"
91 ECHO: "[ INFO ] run_test(); t11 passed: 'mean([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=7\&.5'"
92 ECHO: "[ INFO ] root(); not testing: ciselect()"
93 ECHO: "[ INFO ] root(); not testing: cmvselect()"
94 ECHO: "[ INFO ] run_test(); t01 passed: 'eselect_F(undef)=undef'"
95 ECHO: "[ INFO ] run_test(); t02 passed: 'eselect_F([])=[]'"
96 ECHO: "[ INFO ] run_test(); t03 passed: 'eselect_F([0 : 0\&.5 : 9])=undef'"
97 ECHO: "[ INFO ] run_test(); t04 passed: 'eselect_F(A string)=["A", " ", "s", "t", "r", "i", "n", "g"]'"
98 ECHO: "[ INFO ] run_test(); t05 passed: 'eselect_F(["orange", "apple", "grape", "banana"])=["o", "a", "g", "b"]'"
99 ECHO: "[ INFO ] run_test(); t06 passed: 'eselect_F(["b", "a", "n", "a", "n", "a", "s"])=["b", "a", "n", "a", "n", "a", "s"]'"
100 ECHO: "[ INFO ] run_test(); t07 passed: 'eselect_F([undef])=[undef]'"
101 ECHO: "[ INFO ] run_test(); t08 passed: 'eselect_F([[1, 2], [2, 3]])=[1, 2]'"
102 ECHO: "[ INFO ] run_test(); t09 passed: 'eselect_F(["ab", [1, 2], [2, 3], [4, 5]])=["a", 1, 2, 4]'"
103 ECHO: "[ INFO ] run_test(); t10 passed: 'eselect_F([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[1, 4, 7, "a"]'"
104 ECHO: "[ INFO ] run_test(); t11 *skip*: 'eselect_F(Vector of integers 0 to 15)'"
105 ECHO: "[ INFO ] run_test(); t01 passed: 'eselect_L(undef)=undef'"
106 ECHO: "[ INFO ] run_test(); t02 passed: 'eselect_L([])=[]'"
107 ECHO: "[ INFO ] run_test(); t03 passed: 'eselect_L([0 : 0\&.5 : 9])=undef'"
108 ECHO: "[ INFO ] run_test(); t04 passed: 'eselect_L(A string)=["A", " ", "s", "t", "r", "i", "n", "g"]'"
109 ECHO: "[ INFO ] run_test(); t05 passed: 'eselect_L(["orange", "apple", "grape", "banana"])=["e", "e", "e", "a"]'"
110 ECHO: "[ INFO ] run_test(); t06 passed: 'eselect_L(["b", "a", "n", "a", "n", "a", "s"])=["b", "a", "n", "a", "n", "a", "s"]'"
111 ECHO: "[ INFO ] run_test(); t07 passed: 'eselect_L([undef])=[undef]'"
112 ECHO: "[ INFO ] run_test(); t08 passed: 'eselect_L([[1, 2], [2, 3]])=[2, 3]'"
113 ECHO: "[ INFO ] run_test(); t09 passed: 'eselect_L(["ab", [1, 2], [2, 3], [4, 5]])=["b", 2, 3, 5]'"
114 ECHO: "[ INFO ] run_test(); t10 passed: 'eselect_L([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[3, 6, 9, "c"]'"
115 ECHO: "[ INFO ] run_test(); t11 *skip*: 'eselect_L(Vector of integers 0 to 15)'"
116 ECHO: "[ INFO ] run_test(); t01 passed: 'eselect_1(undef)=undef'"
117 ECHO: "[ INFO ] run_test(); t02 passed: 'eselect_1([])=[]'"
118 ECHO: "[ INFO ] run_test(); t03 passed: 'eselect_1([0 : 0\&.5 : 9])=undef'"
119 ECHO: "[ INFO ] run_test(); t04 *skip*: 'eselect_1(A string)'"
120 ECHO: "[ INFO ] run_test(); t05 passed: 'eselect_1(["orange", "apple", "grape", "banana"])=["r", "p", "r", "a"]'"
121 ECHO: "[ INFO ] run_test(); t06 *skip*: 'eselect_1(Test list 02)'"
122 ECHO: "[ INFO ] run_test(); t07 passed: 'eselect_1([undef])=[undef]'"
123 ECHO: "[ INFO ] run_test(); t08 passed: 'eselect_1([[1, 2], [2, 3]])=[2, 3]'"
124 ECHO: "[ INFO ] run_test(); t09 passed: 'eselect_1(["ab", [1, 2], [2, 3], [4, 5]])=["b", 2, 3, 5]'"
125 ECHO: "[ INFO ] run_test(); t10 passed: 'eselect_1([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[2, 5, 8, "b"]'"
126 ECHO: "[ INFO ] run_test(); t11 *skip*: 'eselect_1(Vector of integers 0 to 15)'"
127 ECHO: "[ INFO ] run_test(); t01 passed: 'smerge(undef)=undef'"
128 ECHO: "[ INFO ] run_test(); t02 passed: 'smerge([])=[]'"
129 ECHO: "[ INFO ] run_test(); t03 passed: 'smerge([0 : 0\&.5 : 9])=[[0 : 0\&.5 : 9]]'"
130 ECHO: "[ INFO ] run_test(); t04 passed: 'smerge(A string)=["A string"]'"
131 ECHO: "[ INFO ] run_test(); t05 passed: 'smerge(["orange", "apple", "grape", "banana"])=["orange", "apple", "grape", "banana"]'"
132 ECHO: "[ INFO ] run_test(); t06 passed: 'smerge(["b", "a", "n", "a", "n", "a", "s"])=["b", "a", "n", "a", "n", "a", "s"]'"
133 ECHO: "[ INFO ] run_test(); t07 passed: 'smerge([undef])=[undef]'"
134 ECHO: "[ INFO ] run_test(); t08 passed: 'smerge([[1, 2], [2, 3]])=[1, 2, 2, 3]'"
135 ECHO: "[ INFO ] run_test(); t09 passed: 'smerge(["ab", [1, 2], [2, 3], [4, 5]])=["ab", 1, 2, 2, 3, 4, 5]'"
136 ECHO: "[ INFO ] run_test(); t10 passed: 'smerge([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[1, 2, 3, 4, 5, 6, 7, 8, 9, "a", "b", "c"]'"
137 ECHO: "[ INFO ] run_test(); t11 passed: 'smerge([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]'"
138 ECHO: "[ INFO ] run_test(); t01 passed: 'pmerge(undef)=undef'"
139 ECHO: "[ INFO ] run_test(); t02 passed: 'pmerge([])=[]'"
140 ECHO: "[ INFO ] run_test(); t03 passed: 'pmerge([0 : 0\&.5 : 9])=undef'"
141 ECHO: "[ INFO ] run_test(); t04 passed: 'pmerge(A string)=["A string"]'"
142 ECHO: "[ INFO ] run_test(); t05 passed: 'pmerge(["orange", "apple", "grape", "banana"])=[["o", "a", "g", "b"], ["r", "p", "r", "a"], ["a", "p", "a", "n"], ["n", "l", "p", "a"], ["g", "e", "e", "n"]]'"
143 ECHO: "[ INFO ] run_test(); t06 passed: 'pmerge(["b", "a", "n", "a", "n", "a", "s"])=[["b", "a", "n", "a", "n", "a", "s"]]'"
144 ECHO: "[ INFO ] run_test(); t07 passed: 'pmerge([undef])=undef'"
145 ECHO: "[ INFO ] run_test(); t08 passed: 'pmerge([[1, 2], [2, 3]])=[[1, 2], [2, 3]]'"
146 ECHO: "[ INFO ] run_test(); t09 passed: 'pmerge(["ab", [1, 2], [2, 3], [4, 5]])=[["a", 1, 2, 4], ["b", 2, 3, 5]]'"
147 ECHO: "[ INFO ] run_test(); t10 passed: 'pmerge([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[[1, 4, 7, "a"], [2, 5, 8, "b"], [3, 6, 9, "c"]]'"
148 ECHO: "[ INFO ] run_test(); t11 passed: 'pmerge([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=undef'"
149 ECHO: "[ INFO ] run_test(); t01 passed: 'qsort(undef)=undef'"
150 ECHO: "[ INFO ] run_test(); t02 passed: 'qsort([])=[]'"
151 ECHO: "[ INFO ] run_test(); t03 passed: 'qsort([0 : 0\&.5 : 9])=undef'"
152 ECHO: "[ INFO ] run_test(); t04 passed: 'qsort(A string)=undef'"
153 ECHO: "[ INFO ] run_test(); t05 passed: 'qsort(["orange", "apple", "grape", "banana"])=["apple", "banana", "grape", "orange"]'"
154 ECHO: "[ INFO ] run_test(); t06 passed: 'qsort(["b", "a", "n", "a", "n", "a", "s"])=["a", "a", "a", "b", "n", "n", "s"]'"
155 ECHO: "[ INFO ] run_test(); t07 passed: 'qsort([undef])=[undef]'"
156 ECHO: "[ INFO ] run_test(); t08 *skip*: 'qsort(Test list 04)'"
157 ECHO: "[ INFO ] run_test(); t09 *skip*: 'qsort(Test list 05)'"
158 ECHO: "[ INFO ] run_test(); t10 *skip*: 'qsort(Test list 06)'"
159 ECHO: "[ INFO ] run_test(); t11 passed: 'qsort([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]'"
160 ECHO: "[ INFO ] run_test(); t01 passed: 'qsort_1R(undef)=undef'"
161 ECHO: "[ INFO ] run_test(); t02 passed: 'qsort_1R([])=[]'"
162 ECHO: "[ INFO ] run_test(); t03 passed: 'qsort_1R([0 : 0\&.5 : 9])=undef'"
163 ECHO: "[ INFO ] run_test(); t04 passed: 'qsort_1R(A string)=undef'"
164 ECHO: "[ INFO ] run_test(); t05 passed: 'qsort_1R(["orange", "apple", "grape", "banana"])=["orange", "grape", "apple", "banana"]'"
165 ECHO: "[ INFO ] run_test(); t06 *skip*: 'qsort_1R(Test list 02)'"
166 ECHO: "[ INFO ] run_test(); t07 *skip*: 'qsort_1R(Test list 03)'"
167 ECHO: "[ INFO ] run_test(); t08 passed: 'qsort_1R([[1, 2], [2, 3]])=[[2, 3], [1, 2]]'"
168 ECHO: "[ INFO ] run_test(); t09 passed: 'qsort_1R(["ab", [1, 2], [2, 3], [4, 5]])=[[4, 5], [2, 3], [1, 2], "ab"]'"
169 ECHO: "[ INFO ] run_test(); t10 passed: 'qsort_1R([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[[7, 8, 9], [4, 5, 6], [1, 2, 3], ["a", "b", "c"]]'"
170 ECHO: "[ INFO ] run_test(); t11 *skip*: 'qsort_1R(Vector of integers 0 to 15)'"
171 ECHO: "[ INFO ] run_test(); t01 passed: 'qsort2_1R(undef)=undef'"
172 ECHO: "[ INFO ] run_test(); t02 passed: 'qsort2_1R([])=[]'"
173 ECHO: "[ INFO ] run_test(); t03 passed: 'qsort2_1R([0 : 0\&.5 : 9])=undef'"
174 ECHO: "[ INFO ] run_test(); t04 passed: 'qsort2_1R(A string)=undef'"
175 ECHO: "[ INFO ] run_test(); t05 passed: 'qsort2_1R(["orange", "apple", "grape", "banana"])=["orange", "grape", "apple", "banana"]'"
176 ECHO: "[ INFO ] run_test(); t06 *skip*: 'qsort2_1R(Test list 02)'"
177 ECHO: "[ INFO ] run_test(); t07 *skip*: 'qsort2_1R(Test list 03)'"
178 ECHO: "[ INFO ] run_test(); t08 passed: 'qsort2_1R([[1, 2], [2, 3]])=[[2, 3], [1, 2]]'"
179 ECHO: "[ INFO ] run_test(); t09 passed: 'qsort2_1R(["ab", [1, 2], [2, 3], [4, 5]])=["ab", [4, 5], [2, 3], [1, 2]]'"
180 ECHO: "[ INFO ] run_test(); t10 passed: 'qsort2_1R([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[["a", "b", "c"], [7, 8, 9], [4, 5, 6], [1, 2, 3]]'"
181 ECHO: "[ INFO ] run_test(); t11 *skip*: 'qsort2_1R(Vector of integers 0 to 15)'"
182 ECHO: "[ INFO ] run_test(); t01 passed: 'qsort2_HR(undef)=undef'"
183 ECHO: "[ INFO ] run_test(); t02 passed: 'qsort2_HR([])=[]'"
184 ECHO: "[ INFO ] run_test(); t03 passed: 'qsort2_HR([0 : 0\&.5 : 9])=undef'"
185 ECHO: "[ INFO ] run_test(); t04 passed: 'qsort2_HR(A string)=undef'"
186 ECHO: "[ INFO ] run_test(); t05 passed: 'qsort2_HR(["orange", "apple", "grape", "banana"])=["orange", "grape", "banana", "apple"]'"
187 ECHO: "[ INFO ] run_test(); t06 passed: 'qsort2_HR(["b", "a", "n", "a", "n", "a", "s"])=["s", "n", "n", "b", "a", "a", "a"]'"
188 ECHO: "[ INFO ] run_test(); t07 passed: 'qsort2_HR([undef])=[undef]'"
189 ECHO: "[ INFO ] run_test(); t08 passed: 'qsort2_HR([[1, 2], [2, 3]])=[[3, 2], [2, 1]]'"
190 ECHO: "[ INFO ] run_test(); t09 passed: 'qsort2_HR(["ab", [1, 2], [2, 3], [4, 5]])=[[5, 4], [3, 2], [2, 1], "ab"]'"
191 ECHO: "[ INFO ] run_test(); t10 passed: 'qsort2_HR([[1, 2, 3], [4, 5, 6], [7, 8, 9], ["a", "b", "c"]])=[["c", "b", "a"], [9, 8, 7], [6, 5, 4], [3, 2, 1]]'"
192 ECHO: "[ INFO ] run_test(); t11 passed: 'qsort2_HR([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])=[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]'"

.fi
.PP
 
