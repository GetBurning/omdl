.TH "tv_math_vector_r" 3 "Sat Feb 4 2017" "Version v0.5" "omdl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tv_math_vector_r \- Validation Results 

.PP
.nf
1 ECHO: "OpenSCAD Version [2016, 12, 21]"
2 ECHO: "[ INFO ] run(): test(); t01 passed: 'distance_pp(undef, undef)=~undef'"
3 ECHO: "[ INFO ] run(): test(); t02 passed: 'distance_pp([], [])=~undef'"
4 ECHO: "[ INFO ] run(): test(); t03 passed: 'distance_pp(60, 50)=~undef'"
5 ECHO: "[ INFO ] run(): test(); t04 passed: 'distance_pp([99], [58])=~41'"
6 ECHO: "[ INFO ] run(): test(); t05 passed: 'distance_pp([99, 2], [58, 16])=~43\&.3244'"
7 ECHO: "[ INFO ] run(): test(); t06 passed: 'distance_pp([199, 20, 55], [158, 116, 75])=~106\&.287'"
8 ECHO: "[ INFO ] run(): test(); t07 passed: 'distance_pp([169, 27, 35, 10], [178, 16, 25, 20])=~undef'"
9 ECHO: "[ INFO ] run(): test(); t08 passed: 'distance_pp([1, 0, 0], [0, 1, 0])=~1\&.4142'"
10 ECHO: "[ INFO ] run(): test(); t09 passed: 'distance_pp([1, 0, 0], [0, 1, 0])=~1\&.4142'"
11 ECHO: "[ INFO ] run(): test(); t01 passed: 'dot_vv(undef, undef, undef, undef)=~undef'"
12 ECHO: "[ INFO ] run(): test(); t02 passed: 'dot_vv([], [], [], [])=~undef'"
13 ECHO: "[ INFO ] run(): test(); t03 passed: 'dot_vv(60, 50, 40, 30)=~400'"
14 ECHO: "[ INFO ] run(): test(); t04 passed: 'dot_vv([99], [58], [12], [42])=~1392'"
15 ECHO: "[ INFO ] run(): test(); t05 passed: 'dot_vv([99, 2], [58, 16], [12, 43], [42, 13])=~1269'"
16 ECHO: "[ INFO ] run(): test(); t06 passed: 'dot_vv([199, 20, 55], [158, 116, 75], [12, 43, 90], [42, 13, 34])=~17888'"
17 ECHO: "[ INFO ] run(): test(); t07 passed: 'dot_vv([169, 27, 35, 10], [178, 16, 25, 20], [12, 43, 90, 30], [42, 13, 34, 60])=~22599'"
18 ECHO: "[ INFO ] run(): test(); t08 passed: 'dot_vv([1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, 0, 0])=~1'"
19 ECHO: "[ INFO ] run(): test(); t09 passed: 'dot_vv([1, 0, 0], [0, 1, 0], [2, 2, 0], [0, 0, 0])=~-2'"
20 ECHO: "[ INFO ] run(); *skip*: t01 'cross_vv(All undefined)'"
21 ECHO: "[ INFO ] run(); *skip*: t02 'cross_vv(All empty vector)'"
22 ECHO: "[ INFO ] run(); *skip*: t03 'cross_vv(All scalars)'"
23 ECHO: "[ INFO ] run(); *skip*: t04 'cross_vv(All 1D vectors)'"
24 ECHO: "[ INFO ] run(): test(); t05 passed: 'cross_vv([99, 2], [58, 16], [12, 43], [42, 13])=~917'"
25 ECHO: "[ INFO ] run(): test(); t06 passed: 'cross_vv([199, 20, 55], [158, 116, 75], [12, 43, 90], [42, 13, 34])=~[2662, -11727, 21929]'"
26 ECHO: "[ INFO ] run(); *skip*: t07 'cross_vv(All 4D vectors)'"
27 ECHO: "[ INFO ] run(): test(); t08 passed: 'cross_vv([1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, 0, 0])=~[1, -1, 1]'"
28 ECHO: "[ INFO ] run(): test(); t09 passed: 'cross_vv([1, 0, 0], [0, 1, 0], [2, 2, 0], [0, 0, 0])=~[0, 0, -1]'"
29 ECHO: "[ INFO ] run(); *skip*: t01 'striple_vvv(All undefined)'"
30 ECHO: "[ INFO ] run(); *skip*: t02 'striple_vvv(All empty vector)'"
31 ECHO: "[ INFO ] run(); *skip*: t03 'striple_vvv(All scalars)'"
32 ECHO: "[ INFO ] run(); *skip*: t04 'striple_vvv(All 1D vectors)'"
33 ECHO: "[ INFO ] run(): test(); t05 passed: 'striple_vvv([99, 2], [58, 16], [12, 43], [42, 13], [15, 59], [1, 85])=~[-75981, 14663]'"
34 ECHO: "[ INFO ] run(): test(); t06 passed: 'striple_vvv([199, 20, 55], [158, 116, 75], [12, 43, 90], [42, 13, 34], [15, 59, 45], [62, 33, 69])=~199188'"
35 ECHO: "[ INFO ] run(); *skip*: t07 'striple_vvv(All 4D vectors)'"
36 ECHO: "[ INFO ] run(): test(); t08 passed: 'striple_vvv([1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, 0, 0], [0, -1, 0], [0, 0, -1])=~8'"
37 ECHO: "[ INFO ] run(): test(); t09 passed: 'striple_vvv([1, 0, 0], [0, 1, 0], [2, 2, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0])=~0'"
38 ECHO: "[ INFO ] run(): test(); t01 passed: 'angle_vv(undef, undef, undef, undef)=~undef'"
39 ECHO: "[ INFO ] run(): test(); t02 passed: 'angle_vv([], [], [], [])=~undef'"
40 ECHO: "[ INFO ] run(): test(); t03 passed: 'angle_vv(60, 50, 40, 30)=~undef'"
41 ECHO: "[ INFO ] run(): test(); t04 passed: 'angle_vv([99], [58], [12], [42])=~undef'"
42 ECHO: "[ INFO ] run(): test(); t05 passed: 'angle_vv([99, 2], [58, 16], [12, 43], [42, 13])=~35\&.8525'"
43 ECHO: "[ INFO ] run(): test(); t06 passed: 'angle_vv([199, 20, 55], [158, 116, 75], [12, 43, 90], [42, 13, 34])=~54\&.4261'"
44 ECHO: "[ INFO ] run(): test(); t07 passed: 'angle_vv([169, 27, 35, 10], [178, 16, 25, 20], [12, 43, 90, 30], [42, 13, 34, 60])=~undef'"
45 ECHO: "[ INFO ] run(): test(); t08 passed: 'angle_vv([1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, 0, 0])=~60'"
46 ECHO: "[ INFO ] run(): test(); t09 passed: 'angle_vv([1, 0, 0], [0, 1, 0], [2, 2, 0], [0, 0, 0])=~153\&.435'"
47 ECHO: "[ INFO ] run(); *skip*: t01 'angle_vvn(All undefined)'"
48 ECHO: "[ INFO ] run(); *skip*: t02 'angle_vvn(All empty vector)'"
49 ECHO: "[ INFO ] run(); *skip*: t03 'angle_vvn(All scalars)'"
50 ECHO: "[ INFO ] run(); *skip*: t04 'angle_vvn(All 1D vectors)'"
51 ECHO: "[ INFO ] run(); *skip*: t05 'angle_vvn(All 2D vectors)'"
52 ECHO: "[ INFO ] run(): test(); t06 passed: 'angle_vvn([199, 20, 55], [158, 116, 75], [12, 43, 90], [42, 13, 34], [15, 59, 45], [62, 33, 69])=~83\&.2771'"
53 ECHO: "[ INFO ] run(); *skip*: t07 'angle_vvn(All 4D vectors)'"
54 ECHO: "[ INFO ] run(): test(); t08 passed: 'angle_vvn([1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, 0, 0], [0, -1, 0], [0, 0, -1])=~90'"
55 ECHO: "[ INFO ] run(): test(); t09 passed: 'angle_vvn([1, 0, 0], [0, 1, 0], [2, 2, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0])=~0'"
56 ECHO: "[ INFO ] run(): test(); t01 passed: 'unit_v(undef, undef)=~undef'"
57 ECHO: "[ INFO ] run(): test(); t02 passed: 'unit_v([], [])=~undef'"
58 ECHO: "[ INFO ] run(): test(); t03 passed: 'unit_v(60, 50)=~undef'"
59 ECHO: "[ INFO ] run(): test(); t04 passed: 'unit_v([99], [58])=~[1]'"
60 ECHO: "[ INFO ] run(): test(); t05 passed: 'unit_v([99, 2], [58, 16])=~[0\&.9464, -0\&.3231]'"
61 ECHO: "[ INFO ] run(): test(); t06 passed: 'unit_v([199, 20, 55], [158, 116, 75])=~[0\&.3857, -0\&.9032, -0\&.1882]'"
62 ECHO: "[ INFO ] run(): test(); t07 passed: 'unit_v([169, 27, 35, 10], [178, 16, 25, 20])=~undef'"
63 ECHO: "[ INFO ] run(): test(); t08 passed: 'unit_v([1, 0, 0], [0, 1, 0])=~[0\&.7071, -0\&.7071, 0]'"
64 ECHO: "[ INFO ] run(): test(); t09 passed: 'unit_v([1, 0, 0], [0, 1, 0])=~[0\&.7071, -0\&.7071, 0]'"
65 ECHO: "[ INFO ] run(); *skip*: t01 'are_coplanar_vvv(All undefined)'"
66 ECHO: "[ INFO ] run(); *skip*: t02 'are_coplanar_vvv(All empty vector)'"
67 ECHO: "[ INFO ] run(); *skip*: t03 'are_coplanar_vvv(All scalars)'"
68 ECHO: "[ INFO ] run(); *skip*: t04 'are_coplanar_vvv(All 1D vectors)'"
69 ECHO: "[ INFO ] run(); *skip*: t05 'are_coplanar_vvv(All 2D vectors)'"
70 ECHO: "[ INFO ] run(): test(); t06 passed: 'are_coplanar_vvv([199, 20, 55], [158, 116, 75], [12, 43, 90], [42, 13, 34], [15, 59, 45], [62, 33, 69])=~false'"
71 ECHO: "[ INFO ] run(); *skip*: t07 'are_coplanar_vvv(All 4D vectors)'"
72 ECHO: "[ INFO ] run(): test(); t08 passed: 'are_coplanar_vvv([1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, 0, 0], [0, -1, 0], [0, 0, -1])=~false'"
73 ECHO: "[ INFO ] run(): test(); t09 passed: 'are_coplanar_vvv([1, 0, 0], [0, 1, 0], [2, 2, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0])=~true'"

.fi
.PP
 
