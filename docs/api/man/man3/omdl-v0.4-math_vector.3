.TH "math_vector" 3 "Thu Feb 2 2017" "Version v0.4" "omdl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
math_vector \- Point, Vector and Plane
.PP
Point, vector, and plane computations\&.  

.SS "Files"

.in +1c
.ti -1c
.RI "file \fBmath\&.scad\fP"
.br
.RI "\fIMathematical functions\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "function \fBdistance_pp\fP (p1, p2)"
.br
.RI "\fICompute the distance between two points in a Euclidean 1, 2, or 3D-space\&. \fP"
.ti -1c
.RI "function \fBdot_vv\fP (v1t, v2t, v1i, v2i)"
.br
.RI "\fICompute the dot product of two vectors\&. \fP"
.ti -1c
.RI "function \fBcross_vv\fP (v1t, v2t, v1i, v2i)"
.br
.RI "\fICompute the cross product of two vectors in a Euclidean 3D-space (2D)\&. \fP"
.ti -1c
.RI "function \fBstriple_vvv\fP (v1t, v2t, v3t, v1i, v2i, v3i)"
.br
.RI "\fICompute scalar triple product of two vectors in a Euclidean 3D-space\&. \fP"
.ti -1c
.RI "function \fBangle_vv\fP (v1t, v2t, v1i, v2i)"
.br
.RI "\fICompute the angle between two vectors in a Euclidean 2 or 3D-space\&. \fP"
.ti -1c
.RI "function \fBangle_vvn\fP (v1t, v2t, nvt, v1i, v2i, nvi)"
.br
.RI "\fICompute the angle between two vectors in a Euclidean 3D-space\&. \fP"
.ti -1c
.RI "function \fBunit_v\fP (vt, vi)"
.br
.RI "\fICompute the normalized unit vector for a 1, 2, or 3 term vector\&. \fP"
.ti -1c
.RI "function \fBare_coplanar_vvv\fP (v1t, v2t, v3t, v1i, v2i, v3i)"
.br
.RI "\fITest if three vectors are coplanar in Euclidean 3D-space\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Point, vector, and plane computations\&. 

See validation \fBresults\fP\&. 
.SH "Function Documentation"
.PP 
.SS "function angle_vv (v1t, v2t, v1i, v2i)"

.PP
Compute the angle between two vectors in a Euclidean 2 or 3D-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv1t\fP <vector> Vector 1 head\&. A 2 or 3-tuple of coordinates\&. 
.br
\fIv2t\fP <vector> Vector 2 head\&. A 2 or 3-tuple of coordinates\&.
.br
\fIv1i\fP <vector> Vector 1 tail\&. A 2 or 3-tuple of coordinates\&. 
.br
\fIv2i\fP <vector> Vector 2 tail\&. A 2 or 3-tuple of coordinates\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The angle between the two vectors in degrees\&. Returns \fB'undef'\fP when vector coordinates do not have same number of terms or when the vectors do not intersect\&.
.RE
.PP
Each vector may be specified by both its head and tail coordinates\&. When specified by head coordinate only, the tail is assumed to be at origin\&.
.PP
\fBNote:\fP
.RS 4
For 3D vectors, a normal vector is required to uniquely identify the perpendicular plane and axis of rotation for the two vectors\&. This function calculates the positive angle, and the plane and axis of rotation will be that which fits this assumed positive angle\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBangle_vvn()\fP\&. 
.RE
.PP

.SS "function angle_vvn (v1t, v2t, nvt, v1i, v2i, nvi)"

.PP
Compute the angle between two vectors in a Euclidean 3D-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv1t\fP <vector> Vector 1 head\&. A 3-tuple of coordinates\&. 
.br
\fIv2t\fP <vector> Vector 2 head\&. A 3-tuple of coordinates\&. 
.br
\fInvt\fP <vector> Normal vector head\&. A 3-tuple of coordinates\&.
.br
\fIv1i\fP <vector> Vector 1 tail\&. A 3-tuple of coordinates\&. 
.br
\fIv2i\fP <vector> Vector 2 tail\&. A 3-tuple of coordinates\&. 
.br
\fInvi\fP <vector> Normal vector tail\&. A 3-tuple of coordinates\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The angle between the two vectors in degrees\&. Returns \fB'undef'\fP when vector coordinates do not have same number of terms or when the vectors do not intersect\&.
.RE
.PP
Each vector may be specified by both its head and tail coordinates\&. When specified by head coordinate only, the tail is assumed to be at origin\&.
.PP
\fBSee also:\fP
.RS 4
\fBangle_vv()\fP\&. 
.RE
.PP

.SS "function are_coplanar_vvv (v1t, v2t, v3t, v1i, v2i, v3i)"

.PP
Test if three vectors are coplanar in Euclidean 3D-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv1t\fP <vector> Vector 1 head\&. A 3-tuple of coordinates\&. 
.br
\fIv2t\fP <vector> Vector 2 head\&. A 3-tuple of coordinates\&. 
.br
\fIv3t\fP <vector> Vector 3 head\&. A 3-tuple of coordinates\&.
.br
\fIv1i\fP <vector> Vector 1 tail\&. A 3-tuple of coordinates\&. 
.br
\fIv2i\fP <vector> Vector 2 tail\&. A 3-tuple of coordinates\&. 
.br
\fIv3i\fP <vector> Vector 3 tail\&. A 3-tuple of coordinates\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<boolean> \fBtrue\fP when all three vectors are coplanar, and \fBfalse\fP otherwise\&.
.RE
.PP
Each vector may be specified by both its head and tail coordinates\&. When specified by head coordinate only, the tail is assumed to be at origin\&.
.PP
See \fCWikipedia\fP for more information\&.
.PP
\fBNote:\fP
.RS 4
Coplanar vectors must all be within the same plane\&. However, this function can test if vectors are in a plane that is parallel to a coplanar plane by using non-zero vector tails\&. 
.RE
.PP

.SS "function cross_vv (v1t, v2t, v1i, v2i)"

.PP
Compute the cross product of two vectors in a Euclidean 3D-space (2D)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv1t\fP <vector> Vector 1 head\&. A 2 or 3-tuple of coordinates\&. 
.br
\fIv2t\fP <vector> Vector 2 head\&. A 2 or 3-tuple of coordinates\&.
.br
\fIv1i\fP <vector> Vector 1 tail\&. A 2 or 3-tuple of coordinates\&. 
.br
\fIv2i\fP <vector> Vector 2 tail\&. A 2 or 3-tuple of coordinates\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The cross product of the two vectors\&. Returns \fB'undef'\fP when vector coordinates do not have same number of terms, n\&.
.RE
.PP
Each vector may be specified by both its head and tail coordinates\&. When specified by head coordinate only, the tail is assumed to be at origin\&.
.PP
See Wikipedia \fCcross\fP and \fCdeterminant\fP for more information\&.
.PP
\fBNote:\fP
.RS 4
Although the cross product of two vectors is defined only in 3D space, this function will return the 2x2 determinant for a 2D vector\&.
.RE
.PP

.SS "function distance_pp (p1, p2)"

.PP
Compute the distance between two points in a Euclidean 1, 2, or 3D-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp1\fP <vector> A 1, 2, or 3-tuple of coordinates\&. 
.br
\fIp2\fP <vector> A 1, 2, or 3-tuple of coordinates\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The distance between the two points\&. Returns \fB'undef'\fP when x and y do not have same number of terms or for n-tuple where n>3\&.
.RE
.PP
When \fCp2\fP is not given, it is assumed to be at the origin\&. 
.SS "function dot_vv (v1t, v2t, v1i, v2i)"

.PP
Compute the dot product of two vectors\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv1t\fP <vector> Vector 1 head\&. An n-tuple of coordinates\&. 
.br
\fIv2t\fP <vector> Vector 2 head\&. An n-tuple of coordinates\&.
.br
\fIv1i\fP <vector> Vector 1 tail\&. An n-tuple of coordinates\&. 
.br
\fIv2i\fP <vector> Vector 2 tail\&. An n-tuple of coordinates\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The dot product of the two vectors\&. Returns \fB'undef'\fP when vector coordinates do not have same number of terms, n\&.
.RE
.PP
Each vector may be specified by both its head and tail coordinates\&. When specified by head coordinate only, the tail is assumed to be at origin\&.
.PP
See \fCWikipedia\fP for more information\&. 
.SS "function striple_vvv (v1t, v2t, v3t, v1i, v2i, v3i)"

.PP
Compute scalar triple product of two vectors in a Euclidean 3D-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv1t\fP <vector> Vector 1 head\&. A 2 or 3-tuple of coordinates\&. 
.br
\fIv2t\fP <vector> Vector 2 head\&. A 2 or 3-tuple of coordinates\&. 
.br
\fIv3t\fP <vector> Vector 3 head\&. A 2 or 3-tuple of coordinates\&.
.br
\fIv1i\fP <vector> Vector 1 tail\&. A 2 or 3-tuple of coordinates\&. 
.br
\fIv2i\fP <vector> Vector 2 tail\&. A 2 or 3-tuple of coordinates\&. 
.br
\fIv3i\fP <vector> Vector 3 tail\&. A 2 or 3-tuple of coordinates\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The scalar triple product of the three vectors\&. Returns \fB'undef'\fP when vector coordinates do not have same number of terms, n\&.
.RE
.PP
Each vector may be specified by both its head and tail coordinates\&. When specified by head coordinate only, the tail is assumed to be at origin\&.
.PP
[v1, v2, v3] = v1 * (v2 x v3)
.PP
See \fCWikipedia\fP for more information\&.
.PP
\fBWarning:\fP
.RS 4
For 2D vectors, this function produces a 2D \fInon-scalar\fP vector result\&. The cross produce function computes the 2x2 determinant of the 2D vectors \fC(v2 x v3)\fP, which is a scalar value, and this value is \fImultiplied\fP by \fCv1\fP, which results in a 2D vector\&. 
.RE
.PP

.SS "function unit_v (vt, vi)"

.PP
Compute the normalized unit vector for a 1, 2, or 3 term vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvt\fP <vector> Vector head\&. A 1, 2, or 3-tuple of coordinates\&. 
.br
\fIvi\fP <vector> Vector tail\&. A 1, 2, or 3-tuple of coordinates\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<vector> The vector normalized to its unit-vector\&. Returns \fB'undef'\fP when vector coordinates do not have same number of terms or for n-tuple where n>3\&.
.RE
.PP
The vector may be specified by both its head and tail coordinates\&. When specified by head coordinate only, the tail is assumed to be at origin\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for omdl from the source code\&.
