.TH "dt" 3 "Tue Apr 4 2017" "Version v0.6" "omdl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dt \- Data types 

.SH "Built-in"
.PP
\fComdl\fP assumes a \fCvalue\fP is either a number, a boolean, a string, a list, a range, or the undefined value\&. What is called a vector in the \fCOpenSCAD types\fP documentation is refereed to as a \fIlist\fP here in order to distinguish between sequential lists of values and \fCEuclidean vectors\fP\&.
.PP
type description  \fCvalue\fP any valid OpenSCAD storable datum number an arithmetic value boolean a binary logic value (true or false) string a sequential list of of character values list a sequential list of arbitrary values range an arithmetic sequence undef the undefined value 
.SS "Special numerical values"
value description  \fCnan\fP a numerical value which is not a number \fCinf\fP a numerical value which is infinite 
.SH "Additional conventions"
.PP
When a list has an expected number of elements 'n', the \fIcount\fP is appended following a '-'\&. When there is a range of expected elements, the lower and upper bounds are separated by a ':' and appended (order of bounds may be reversed)\&. When the elements values are of an expected type, that \fItype\fP is prepended\&. Combinations are used as needed as in the following table:
.PP
name description  list-n a list of of n elements list-l:u a list of l to u elements type-list a list of elements with an expected type type-list-n a list of n elements with an expected type 
.SS "Distinctions"
\fComdl\fP make the following distinctions on variable types\&.
.PP
name description  \fCscalar\fP a single non-iterable value \fCiterable\fP a multi-part sequence of values \fCempty\fP an iterable value with zero elements \fCeven\fP an even numerical value \fCodd\fP an odd numerical value 
.SS "General"
From the fixed built-in set of \fCdata types\fP, \fComdl\fP adds the following general type specifications and conventions\&.
.PP
name description  \fCbit\fP a binary numerical value (0 or 1) \fCinteger\fP a positive, negative, or zero whole number \fCdecimal\fP integer numbers with a fractional part \fBindex\fP a list index sequence \fCdatastruct\fP a defined data structure \fCdata\fP an arbitrary data structure 
.SS "Index sequence"
The data type \fBindex\fP refers to a specified sequence of list element indexes\&. A list index sequence may be specified in one of the following forms\&.
.PP
value / form description  \fBtrue\fP All index positions of the list [0:size-1] \fBfalse\fP No index positions 'all' All index positions of the list [0:size-1] 'none' No index positions 'rands' Random index selection of the list [0:size-1] 'even' The even index of the list [0:size-1] 'odd' The odd index of the list [0:size-1] <integer> The single position given by an <integer> <range> The range of positions given by a <range> <integer-list> The list of positions give in <integer-list> The function \fBget_index()\fP can be used to convert a value of this data type into a sequence of list element indexes\&.
.PP
\fBExample\fP 
.PP
.PP
.nf
// list
l1 = [a,b,c,d,e,f]

// index sequence
get_index(l1)          = [0,1,2,3,4,5]
get_index(l1, "rands") = [0,2,5]
.fi
.PP
.SS "Geometric"
For \fCgeometric\fP specifications and \fCgeometric algebra\fP, \fComdl\fP adds the following type specifications and conventions\&.
.PP
name description  \fCpoint\fP a list of numbers to identify a location in space \fCvector\fP a direction and magnitude in space \fBline\fP a start and end point in space (\fCline wiki\fP) \fCnormal\fP a vector that is perpendicular to a given object \fBpnorm\fP a vector that is perpendicular to a plane \fBplane\fP a flat 2d infinite surface (\fCplane wiki\fP) \fCcoords\fP a list of points in space \fCmatrix\fP a rectangular array of values When a particular dimension is expected, the dimensional expectation is appended to the end of the name after a '-' dash as in the following table\&.
.PP
name description  point-Nd a point in an 'N' dimensional space vector-Nd a vector in an 'N' dimensional space line-Nd a line in an 'N' dimensional space coords-Nd a coordinate list in an 'N' dimensional space matrix-MxN a 'M' by 'N' matrix of values 
.SS "Lines and vectors"
The data type \fBline\fP refers to a convention for specifying a line or a vector\&. A vector is a direction and magnitude in space\&. A line, too, has direction and magnitude, but also has location, as it starts at one point in space and ends at another\&. Operators in \fComdl\fP make use of a common convention for specifying Euclidean vectors and straight lines as summarized in the following table:
.PP
Given two points \fC'p1'\fP and \fC'p2'\fP, in space:
.PP
no\&. form description  1 p2 a line or vector from the origin to 'p2' 2 [p2] a line or vector from the origin to 'p2' 3 [p1, p2] line or vector from 'p1' to 'p2' The functions \fBget_line_dim()\fP, \fBget_line_tp()\fP, \fBget_line_ip()\fP, and \fBget_line2origin()\fP, are available to identify the dimension of and convert a line into a vector or point\&.
.PP
\fBExample\fP 
.PP
.PP
.nf
// points
p1 = [a,b,c]
p2 = [d,e,f]

// lines and vectors
v1 = p2       = [d,e,f]
v2 = [p2]     = [[d,e,f]]
v3 = [p1, p2] = [[a,b,c], [d,e,f]]

v1 == v2
v1 == v2 == v3, iff p1 == origin3d
.fi
.PP
.SS "Planes"
Operators in \fComdl\fP use a common convention for specifying planes\&. A \fBplane\fP is identified by a \fCpoint\fP on its surface together with its \fCnormal\fP vector specified by \fBpnorm\fP, which is discussed in the following section\&. A list with a point and normal together specify the plane as follows:
.PP
name form  \fBplane\fP [\fCpoint\fP, \fBpnorm\fP] 
.SS "Planes' normal"
The data type \fBpnorm\fP refers to a convention for specifying a direction vector that is perpendicular to a plane\&. Given three points \fC'p1'\fP, \fC'p2'\fP, \fC'p3'\fP, and three vectors \fC'v1'\fP, \fC'v2'\fP, \fC'vn'\fP, the planes' \fCnormal\fP can be specified in any of the following forms:
.PP
no\&. form description  1 vn the predetermined normal vector to the plane 2 [vn] the predetermined normal vector to the plane 3 [v1, v2] two distinct but intersecting vectors 4 [p1, p2, p3] three (or more) non-collinear coplanar points The function \fBget_pnorm2nv()\fP can be used to convert a value of this data type into a normal vector\&.
.PP
\fBExample\fP 
.PP
.PP
.nf
// points
p1 = [a,b,c];
p2 = [d,e,f];
p3 = [g,h,i];

// lines and vectors
v1 = [p1, p2] = [[a,b,c], [d,e,f]]
v2 = [p1, p3] = [[a,b,c], [g,h,i]]
vn = cross_ll(v1, v2)

// planes' normal
n1 = vn           = cross_ll(v1, v2)
n2 = [vn]         = cross_ll(v1, v2)
n3 = [v1, v2]     = [[[a,b,c],[d,e,f]], [[a,b,c],[g,h,i]]]
n4 = [p1, p2, p3] = [[a,b,c], [d,e,f], [g,h,i]]

n1 || n2 || n3 || n4

// planes
pn1 = [p1, n1]
pn2 = [p2, n2]
pn3 = [p3, n3]
pn4 = [n4[0], n4]
pn5 = [mean(n4), n4]

pn1 == pn4
.fi
.PP
 
