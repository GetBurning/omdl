.TH "math_polytope" 3 "Fri Apr 7 2017" "Version v0.6.1" "omdl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
math_polytope \- Polytopes
.PP
Polygon and polyhedron mathematical functions\&.  

.SS "Files"

.in +1c
.ti -1c
.RI "file \fBmath_polytope\&.scad\fP"
.br
.RI "\fIPolygon and polyhedron mathematical functions\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "function \fBpolytope_faces2edges\fP (f)"
.br
.RI "\fIList the edge coordinate index pairs of a polytope\&. \fP"
.ti -1c
.RI "function \fBpolytope_limits\fP (c, f, a, d=[0:2], s=true)"
.br
.RI "\fIDetermine the bounding limits of a polytope\&. \fP"
.ti -1c
.RI "function \fBpolytope_bbox_pf\fP (c, f, a)"
.br
.RI "\fIGenerate a bounding box polytope for another polytope in 3d or 2d\&. \fP"
.ti -1c
.RI "function \fBpolytope_line\fP (c, f, e, i, l, r=false)"
.br
.RI "\fIGet a line from an edge or any two vetices of a polytope\&. \fP"
.ti -1c
.RI "function \fBpolytope_vertex_av\fP (f, i)"
.br
.RI "\fIList the adjacent vertices for a given polytope vertex\&. \fP"
.ti -1c
.RI "function \fBpolytope_vertex_af\fP (f, i)"
.br
.RI "\fIList the adjacent face indexes for a polytope vertex\&. \fP"
.ti -1c
.RI "function \fBpolytope_edge_af\fP (f, e, i)"
.br
.RI "\fIList the adjacent face indexes for a polytope edge\&. \fP"
.ti -1c
.RI "function \fBpolytope_vertex_n\fP (c, f, i)"
.br
.RI "\fIGet a normal vector for a polytope vertex\&. \fP"
.ti -1c
.RI "function \fBpolytope_edge_n\fP (c, f, e, i)"
.br
.RI "\fIGet a normal vector for a polytope edge\&. \fP"
.ti -1c
.RI "function \fBpolytope_face_n\fP (c, f, i, l, cw=true)"
.br
.RI "\fIGet the normal vector of a polytope face\&. \fP"
.ti -1c
.RI "function \fBpolytope_face_m\fP (c, f, i, l)"
.br
.RI "\fIGet the mean coordinate of all vertices of a polytope face\&. \fP"
.ti -1c
.RI "function \fBpolytope_face_mn\fP (c, f, i, l, cw=true)"
.br
.RI "\fIGet the mean coordinate and normal vector of a polytope face\&. \fP"
.ti -1c
.RI "function \fBpolytope_plane\fP (c, f, i, l, cw=true)"
.br
.RI "\fIGet a plane for a polytope face\&. \fP"
.ti -1c
.RI "function \fBpolytope_face_vcounts\fP (f)"
.br
.RI "\fIList the vertex counts for all polytope faces\&. \fP"
.ti -1c
.RI "function \fBpolytope_face_angles\fP (c, f)"
.br
.RI "\fIList the angles between all adjacent faces of a polyhedron\&. \fP"
.ti -1c
.RI "function \fBpolytope_edge_lengths\fP (c, e)"
.br
.RI "\fIList the edge lengths of a polytope\&. \fP"
.ti -1c
.RI "function \fBpolytope_edge_angles\fP (c, f)"
.br
.RI "\fIList the adjacent edge angles for each polytope vertex\&. \fP"
.ti -1c
.RI "function \fBpolytope_faces_are_regular\fP (c, f, e, d=6)"
.br
.RI "\fITest if the faces of a polytope are all regular\&. \fP"
.ti -1c
.RI "function \fBpolytope_triangulate_ft\fP (f)"
.br
.RI "\fITriangulate the faces of a convex polytope using fan triangulation\&. \fP"
.ti -1c
.RI "function \fBpolygon2d_perimeter\fP (c, p)"
.br
.RI "\fICalculate the perimeter length of a polygon in 2d\&. \fP"
.ti -1c
.RI "function \fBpolygon2d_area\fP (c, p, s=false)"
.br
.RI "\fICompute the signed area of a polygon in a Euclidean 2d-space\&. \fP"
.ti -1c
.RI "function \fBpolygon3d_area\fP (c, p, n)"
.br
.RI "\fICompute the area of a polygon in a Euclidean 3d-space\&. \fP"
.ti -1c
.RI "function \fBpolygon2d_centroid\fP (c, p)"
.br
.RI "\fICompute the center of mass of a polygon in a Euclidean 2d-space\&. \fP"
.ti -1c
.RI "function \fBpolygon2d_is_cw\fP (c, p)"
.br
.RI "\fITest the vertex ordering of a polygon in a Euclidean 2d-space\&. \fP"
.ti -1c
.RI "function \fBpolygon2d_is_convex\fP (c, p)"
.br
.RI "\fITest the convexity of a polygon in a Euclidean 2d-space\&. \fP"
.ti -1c
.RI "function \fBpolygon2d_winding\fP (c, p, t)"
.br
.RI "\fICompute the winding number of a polygon about a point in a Euclidean 2d-space\&. \fP"
.ti -1c
.RI "function \fBpolygon2d_is_pip_wn\fP (c, p, t)"
.br
.RI "\fITest if a point is inside a polygon in a Euclidean 2d-space using winding number\&. \fP"
.ti -1c
.RI "function \fBpolygon2d_is_pip_as\fP (c, p, t)"
.br
.RI "\fITest if a point is inside a polygon in a Euclidean 2d-space using angle summation\&. \fP"
.ti -1c
.RI "function \fBpolyhedron_area\fP (c, f)"
.br
.RI "\fICompute the surface area of a polyhedron in a Euclidean 3d-space\&. \fP"
.ti -1c
.RI "function \fBpolyhedron_volume_tf\fP (c, f)"
.br
.RI "\fICompute the volume of a triangulated polyhedron in a Euclidean 3d-space\&. \fP"
.ti -1c
.RI "function \fBpolyhedron_centroid_tf\fP (c, f)"
.br
.RI "\fICompute the center of mass of a triangulated polyhedron in a Euclidean 3d-space\&. \fP"
.ti -1c
.RI "function \fBlinear_extrude_pp2pf\fP (c, p, h=1, centroid=false, center=false)"
.br
.RI "\fIConvert a polygon to a polyhedron by adding a height dimension\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Polygon and polyhedron mathematical functions\&. 


.SH "Function Documentation"
.PP 
.SS "function linear_extrude_pp2pf (c, p, h = \fC1\fP, centroid = \fCfalse\fP, center = \fCfalse\fP)"

.PP
Convert a polygon to a polyhedron by adding a height dimension\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-2d> A list of 2d cartesian coordinates [[x, y], \&.\&.\&.]\&. 
.br
\fIp\fP <integer-list-list> An \fIoptional\fP list of paths that define one or more closed shapes where each is a list of coordinate indexes\&. 
.br
\fIh\fP <decimal> The polyhedron height\&. 
.br
\fIcentroid\fP <boolean> Center polygon centroid at z-axis\&. 
.br
\fIcenter\fP <boolean> Center polyhedron height about xy-plane\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<datastruct> A structure \fC[points, faces]\fP, where \fCpoints\fP are <coords-3d> and \fCfaces\fP are a <integer-list-list>, that define the bounding box of the given polyhedron\&.
.RE
.PP
\fBNote:\fP
.RS 4
When \fCp\fP is not given, the listed order of the coordinates \fCc\fP establishes the path\&. 
.RE
.PP

.SS "function polygon2d_area (c, p, s = \fCfalse\fP)"

.PP
Compute the signed area of a polygon in a Euclidean 2d-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-2d> A list of 2d cartesian coordinates [[x, y], \&.\&.\&.]\&. 
.br
\fIp\fP <integer-list-list> An \fIoptional\fP list of paths that define one or more closed shapes where each is a list of coordinate indexes\&. 
.br
\fIs\fP <boolean> Return the vertex ordering sign\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The area of the given polygon\&.
.RE
.PP
See \fCWikipedia\fP for more information\&.
.PP
\fBNote:\fP
.RS 4
When \fCp\fP is not given, the listed order of the coordinates \fCc\fP establishes the path\&. 
.RE
.PP
\fBWarning:\fP
.RS 4
This function does not track secondary shapes subtraction as implemented by the polygon() function\&. 
.RE
.PP

.SS "function polygon2d_centroid (c, p)"

.PP
Compute the center of mass of a polygon in a Euclidean 2d-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-2d> A list of 2d cartesian coordinates [[x, y], \&.\&.\&.]\&. 
.br
\fIp\fP <integer-list-list> An \fIoptional\fP list of paths that define one or more closed shapes where each is a list of coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<point-2d> The center of mass of the given polygon\&.
.RE
.PP
See \fCWikipedia\fP for more information\&.
.PP
\fBNote:\fP
.RS 4
When \fCp\fP is not given, the listed order of the coordinates \fCc\fP establishes the path\&. 
.RE
.PP
\fBWarning:\fP
.RS 4
This function does not track secondary shapes subtraction as implemented by the polygon() function\&. 
.RE
.PP

.SS "function polygon2d_is_convex (c, p)"

.PP
Test the convexity of a polygon in a Euclidean 2d-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-2d> A list of 2d cartesian coordinates [[x, y], \&.\&.\&.]\&. 
.br
\fIp\fP <integer-list-list> An \fIoptional\fP list of paths that define one or more closed shapes where each is a list of coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<boolean> \fBtrue\fP if the polygon is \fIconvex\fP, \fBfalse\fP otherwise\&.
.RE
.PP
\fBNote:\fP
.RS 4
When \fCp\fP is not given, the listed order of the coordinates \fCc\fP establishes the path\&. 
.RE
.PP

.SS "function polygon2d_is_cw (c, p)"

.PP
Test the vertex ordering of a polygon in a Euclidean 2d-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-2d> A list of 2d cartesian coordinates [[x, y], \&.\&.\&.]\&. 
.br
\fIp\fP <integer-list-list> An \fIoptional\fP list of paths that define one or more closed shapes where each is a list of coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<boolean> \fBtrue\fP if the vertex are ordered \fIclockwise\fP, \fBfalse\fP if the vertex are \fIcounterclockwise\fP ordered, and \fBundef\fP if the ordering can not be determined\&.
.RE
.PP
\fBNote:\fP
.RS 4
When \fCp\fP is not given, the listed order of the coordinates \fCc\fP establishes the path\&. 
.RE
.PP

.SS "function polygon2d_is_pip_as (c, p, t)"

.PP
Test if a point is inside a polygon in a Euclidean 2d-space using angle summation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-2d> A list of 2d cartesian coordinates [[x, y], \&.\&.\&.]\&. 
.br
\fIp\fP <integer-list-list> An \fIoptional\fP list of paths that define one or more closed shapes where each is a list of coordinate indexes\&. 
.br
\fIt\fP <point-2d> A test point coordinate [x, y]\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<boolean> \fBtrue\fP when the point is \fIinside\fP the polygon and \fBfalse\fP otherwise\&.
.RE
.PP
See \fCWikipedia\fP for more information\&.
.PP
\fBNote:\fP
.RS 4
When \fCp\fP is not given, the listed order of the coordinates \fCc\fP establishes the path\&. 
.RE
.PP
\fBWarning:\fP
.RS 4
This function does not track secondary shapes subtraction as implemented by the polygon() function\&. 
.RE
.PP

.SS "function polygon2d_is_pip_wn (c, p, t)"

.PP
Test if a point is inside a polygon in a Euclidean 2d-space using winding number\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-2d> A list of 2d cartesian coordinates [[x, y], \&.\&.\&.]\&. 
.br
\fIp\fP <integer-list-list> An \fIoptional\fP list of paths that define one or more closed shapes where each is a list of coordinate indexes\&. 
.br
\fIt\fP <point-2d> A test point coordinate [x, y]\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<boolean> \fBtrue\fP when the point is \fIinside\fP the polygon and \fBfalse\fP otherwise\&.
.RE
.PP
\fBNote:\fP
.RS 4
When \fCp\fP is not given, the listed order of the coordinates \fCc\fP establishes the path\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBpolygon2d_winding\fP for warning about secondary \fBShapes\fP\&. 
.RE
.PP

.SS "function polygon2d_perimeter (c, p)"

.PP
Calculate the perimeter length of a polygon in 2d\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-2d> A list of 2d cartesian coordinates [[x, y], \&.\&.\&.]\&. 
.br
\fIp\fP <integer-list-list> An \fIoptional\fP list of paths that define one or more closed shapes where each is a list of coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The sum of all polygon primary and secondary perimeter lengths\&.
.RE
.PP
\fBNote:\fP
.RS 4
When \fCp\fP is not given, the listed order of the coordinates \fCc\fP establishes the path\&. 
.RE
.PP

.SS "function polygon2d_winding (c, p, t)"

.PP
Compute the winding number of a polygon about a point in a Euclidean 2d-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-2d> A list of 2d cartesian coordinates [[x, y], \&.\&.\&.]\&. 
.br
\fIp\fP <integer-list-list> An \fIoptional\fP list of paths that define one or more closed shapes where each is a list of coordinate indexes\&. 
.br
\fIt\fP <point-2d> A test point coordinate [x, y]\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer> The winding number\&.
.RE
.PP
Computes the \fCwinding number\fP, the total number of counterclockwise turns that the polygon paths makes around the test point in a Euclidean 2d-space\&. Will be 0 \fIiff\fP the point is outside of the polygon\&. Function patterned after \fCDan Sunday, 2012\fP\&.
.PP
\fBCopyright:\fP
.RS 4
.RE
.PP
Copyright 2000 softSurfer, 2012 Dan Sunday This code may be freely used and modified for any purpose providing that this copyright notice is included with it\&. iSurfer\&.org makes no warranty for this code, and cannot be held liable for any real or imagined damage resulting from its use\&. Users of this code must verify correctness for their application\&.
.PP
\fBNote:\fP
.RS 4
When \fCp\fP is not given, the listed order of the coordinates \fCc\fP establishes the path\&. 
.RE
.PP
\fBWarning:\fP
.RS 4
Where there are secondary paths, the vertex ordering of each must be the same as the primary path\&. 
.RE
.PP

.SS "function polygon3d_area (c, p, n)"

.PP
Compute the area of a polygon in a Euclidean 3d-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d> A list of 3d cartesian coordinates [[x, y, z], \&.\&.\&.]\&. 
.br
\fIp\fP <integer-list-list> An \fIoptional\fP list of paths that define one or more closed shapes where each is a list of coordinate indexes\&. 
.br
\fIn\fP <vector-3d> An \fIoptional\fP normal vector, [x, y, z], to the polygon plane\&. When not given, a normal vector is constructed from the first three points of the primary path\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The area of the given polygon\&.
.RE
.PP
Function patterned after \fCDan Sunday, 2012\fP\&.
.PP
\fBNote:\fP
.RS 4
When \fCp\fP is not given, the listed order of the coordinates \fCc\fP establishes the path\&. 
.RE
.PP
\fBWarning:\fP
.RS 4
This function does not track secondary shapes subtraction as implemented by the polygon() function\&. 
.RE
.PP

.SS "function polyhedron_area (c, f)"

.PP
Compute the surface area of a polyhedron in a Euclidean 3d-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d> A list of 3d cartesian coordinates [[x, y, z], \&.\&.\&.]\&. 
.br
\fIf\fP <integer-list-list> A list of faces that enclose the shape where each face is a list of coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The surface area of the given polyhedron\&. 
.RE
.PP

.SS "function polyhedron_centroid_tf (c, f)"

.PP
Compute the center of mass of a triangulated polyhedron in a Euclidean 3d-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d> A list of 3d cartesian coordinates [[x, y, z], \&.\&.\&.]\&. 
.br
\fIf\fP <integer-list-3-list> A list of triangular faces that enclose the polyhedron where each face is a list of three coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<point-3d> The center of mass of the given polyhedron\&.
.RE
.PP
See \fCWikipedia\fP for more information on centroid determined via the \fCdivergence theorem\fP and midpoint quadrature\&.
.PP
\fBNote:\fP
.RS 4
All faces are assumed to be a union of triangles oriented clockwise from the outside inwards\&. 
.RE
.PP

.SS "function polyhedron_volume_tf (c, f)"

.PP
Compute the volume of a triangulated polyhedron in a Euclidean 3d-space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d> A list of 3d cartesian coordinates [[x, y, z], \&.\&.\&.]\&. 
.br
\fIf\fP <integer-list-3-list> A list of triangular faces that enclose the polyhedron where each face is a list of three coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal> The volume of the given polyhedron\&.
.RE
.PP
See \fCWikipedia\fP for more information on volumes determined using the \fCdivergence theorem\fP\&.
.PP
\fBNote:\fP
.RS 4
All faces are assumed to be a union of triangles oriented clockwise from the outside inwards\&. 
.RE
.PP

.SS "function polytope_bbox_pf (c, f, a)"

.PP
Generate a bounding box polytope for another polytope in 3d or 2d\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d cartesian coordinates [[x, y (, z)], \&.\&.\&.]\&. 
.br
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&. 
.br
\fIa\fP <decimal-list-1:3|decimal> The box padding\&. A list of lengths to equally pad the box dimensions\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<datastruct> A structure: (1) \fC[points, faces]\fP, where \fCpoints\fP are <coords-3d> and \fCfaces\fP are a <integer-list-list>, that define the bounding box of the given polyhedron\&. Or: (2) \fC[points, path]\fP, where \fCpoints\fP are <coords-2d> and \fCpath\fP is a <integer-list-list>, that define the bounding box of the given polygon\&.
.RE
.PP
Polyhedron faces will be ordered \fIclockwise\fP when looking from outside the shape inwards\&. Polygon path will be ordered clockwise when looking from the top (positive z) downwards\&.
.PP
\fBNote:\fP
.RS 4
When \fCf\fP is not specified, all coordinates are used to determine the geometric limits, which, simplifies the calculation\&. Parameter \fCf\fP is needed when a subset of the coordinates should be considered\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBpolytope_limits\fP for warning about secondary \fBShapes\fP\&. 
.RE
.PP

.SS "function polytope_edge_af (f, e, i)"

.PP
List the adjacent face indexes for a polytope edge\&. 
.PP
\fBParameters:\fP
.RS 4
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&. 
.br
\fIe\fP <integer-list-2-list> A list of edges where each edge is a list of two coordinate indexes\&. 
.br
\fIi\fP <integer> The edge index\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer-list> The list of face indexes adjacent to the given polytope edge\&.
.RE
.PP
\fBNote:\fP
.RS 4
When \fCe\fP is not specified, it is computed from \fCf\fP using \fBpolytope_faces2edges()\fP\&. 
.RE
.PP

.SS "function polytope_edge_angles (c, f)"

.PP
List the adjacent edge angles for each polytope vertex\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d cartesian coordinates [[x, y (, z)], \&.\&.\&.]\&. 
.br
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal-list> A list of the polytope adjacent edge angles\&. 
.RE
.PP

.SS "function polytope_edge_lengths (c, e)"

.PP
List the edge lengths of a polytope\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d cartesian coordinates [[x, y (, z)], \&.\&.\&.]\&. 
.br
\fIe\fP <integer-list-2-list> A list of edges where each edge is a list of two coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal-list> A list of the polytope edge lengths\&. 
.RE
.PP

.SS "function polytope_edge_n (c, f, e, i)"

.PP
Get a normal vector for a polytope edge\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d coordinate points\&. 
.br
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&. 
.br
\fIe\fP <integer-list-2-list> A list of edges where each edge is a list of two coordinate indexes\&. 
.br
\fIi\fP <integer> The edge index\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<vector-3d> A normal vector for the polytope edge\&.
.RE
.PP
The normal is computed as the mean of the adjacent faces\&.
.PP
\fBNote:\fP
.RS 4
Parameter \fCf\fP is optional for polygons\&. When it is not given, the listed order of the coordinates \fCc\fP establishes the polygon path\&. 
.PP
When \fCe\fP is not specified, it is computed from \fCf\fP using \fBpolytope_faces2edges()\fP iff the line is identified by \fCi\fP\&. 
.RE
.PP

.SS "function polytope_face_angles (c, f)"

.PP
List the angles between all adjacent faces of a polyhedron\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d> A list of 3d cartesian coordinates [[x, y, z], \&.\&.\&.]\&. 
.br
\fIf\fP <integer-list-list> A list of faces that enclose the shape where each face is a list of coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<decimal-list> A list of the polyhedron adjacent face angles\&.
.RE
.PP
See \fCWikipedia\fP for more information on dihedral angles\&. 
.SS "function polytope_face_m (c, f, i, l)"

.PP
Get the mean coordinate of all vertices of a polytope face\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d coordinate points\&. 
.br
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&.
.br
\fIi\fP <integer> The face specified as an face index\&. 
.br
\fIl\fP <integer-list> The face specified as a list of all the coordinate indexes that define it\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<coords-3d> The mean coordinate of a polytope face\&.
.RE
.PP
The face can be identified using either parameter \fCi\fP or \fCl\fP\&. When using \fCl\fP, the parameter \fCf\fP is not required\&.
.PP
\fBNote:\fP
.RS 4
Parameter \fCf\fP is optional for polygons\&. When it is not given, the listed order of the coordinates \fCc\fP establishes the polygon path\&. 
.RE
.PP

.SS "function polytope_face_mn (c, f, i, l, cw = \fCtrue\fP)"

.PP
Get the mean coordinate and normal vector of a polytope face\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d coordinate points\&. 
.br
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&.
.br
\fIi\fP <integer> The face specified as an face index\&. 
.br
\fIl\fP <integer-list> The face specified as a list of all the coordinate indexes that define it\&.
.br
\fIcw\fP <boolean> Face vertex ordering\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<plane> \fC[mp, nv]\fP, where \fCmp\fP is \fCcoords-3d\fP, the mean coordinate, and \fCnv\fP is \fCvector-3d\fP, the normal vector, of the polytope face-plane\&.
.RE
.PP
The face can be identified using either parameter \fCi\fP or \fCl\fP\&. When using \fCl\fP, the parameter \fCf\fP is not required\&.
.PP
\fBNote:\fP
.RS 4
Parameter \fCf\fP is optional for polygons\&. When it is not given, the listed order of the coordinates \fCc\fP establishes the polygon path\&. 
.RE
.PP

.SS "function polytope_face_n (c, f, i, l, cw = \fCtrue\fP)"

.PP
Get the normal vector of a polytope face\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d coordinate points\&. 
.br
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&.
.br
\fIi\fP <integer> The face specified as an face index\&. 
.br
\fIl\fP <integer-list> The face-plane specified as a list of three or more coordinate indexes that are a part of the face\&.
.br
\fIcw\fP <boolean> Face vertex ordering\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<vector-3d> The normal vector of a polytope face\&.
.RE
.PP
The face can be identified using either parameter \fCi\fP or \fCl\fP\&. When using \fCl\fP, the parameter \fCf\fP is not required\&.
.PP
\fBNote:\fP
.RS 4
Parameter \fCf\fP is optional for polygons\&. When it is not given, the listed order of the coordinates \fCc\fP establishes the polygon path\&. 
.RE
.PP

.SS "function polytope_face_vcounts (f)"

.PP
List the vertex counts for all polytope faces\&. 
.PP
\fBParameters:\fP
.RS 4
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer-list> A list with a vertex count of every face\&. 
.RE
.PP

.SS "function polytope_faces2edges (f)"

.PP
List the edge coordinate index pairs of a polytope\&. 
.PP
\fBParameters:\fP
.RS 4
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer-list-2-list> A list of edges where each edge is a list of two coordinate indexes that form the shape\&.
.RE
.PP
\fBNote:\fP
.RS 4
Although the edge list is not sorted, each pair is sorted with the smallest index first\&. 
.RE
.PP

.SS "function polytope_faces_are_regular (c, f, e, d = \fC6\fP)"

.PP
Test if the faces of a polytope are all regular\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d cartesian coordinates [[x, y (, z)], \&.\&.\&.]\&. 
.br
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&. 
.br
\fIe\fP <integer-list-2-list> A list of edges where each edge is a list of two coordinate indexes\&. 
.br
\fId\fP <integer> The number of significant figures used when comparing lengths and angles\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<boolean> \fBtrue\fP when there is both a single edge length and a single edge angle and \fBfalse\fP otherwise\&.
.RE
.PP
\fBNote:\fP
.RS 4
When \fCe\fP is not specified, it is computed from \fCf\fP using \fBpolytope_faces2edges()\fP\&. 
.RE
.PP

.SS "function polytope_limits (c, f, a, d = \fC[0:2]\fP, s = \fCtrue\fP)"

.PP
Determine the bounding limits of a polytope\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d cartesian coordinates [[x, y (, z)], \&.\&.\&.]\&. 
.br
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&. 
.br
\fIa\fP <decimal-list-1:3|decimal> The box padding\&. A list of lengths to equally pad the box dimensions\&. 
.br
\fId\fP <range|list|integer> The dimensions to consider\&. A range of dimensions, a list of dimensions, or a single dimension\&. 
.br
\fIs\fP <boolean> Return box size rather than coordinate limits\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<datastruct> A list with the bounding-box limits (see: table)\&.
.RE
.PP
The returned list will be of the following form:
.PP
s x y z datastruct form  2d false [min,max] [min,max] - decimal-list-2-list-2 2d true max-min max-min - decimal-list-list-2 3d false [min,max] [min,max] [min,max] decimal-list-2-list-3 3d true max-min max-min max-min decimal-list-list-3 
.PP
\fBNote:\fP
.RS 4
When \fCf\fP is not specified, all coordinates are used to determine the geometric limits, which, simplifies the calculation\&. Parameter \fCf\fP is needed when a subset of the coordinates should be considered\&. 
.RE
.PP
\fBWarning:\fP
.RS 4
This function does not track secondary shapes subtraction as implemented by the polygon() function\&. 
.RE
.PP

.SS "function polytope_line (c, f, e, i, l, r = \fCfalse\fP)"

.PP
Get a line from an edge or any two vetices of a polytope\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d coordinate points\&.
.br
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&. 
.br
\fIe\fP <integer-list-2-list> A list of edges where each edge is a list of two coordinate indexes\&.
.br
\fIi\fP <integer> A line specified as an edge index\&. 
.br
\fIl\fP <integer-list-2> A line specified as a list of coordinate index pairs\&.
.br
\fIr\fP <boolean> Reverse the line start and end points\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<line-3d|line-2d> The line as a pair of coordinates\&.
.RE
.PP
\fBNote:\fP
.RS 4
Parameter \fCf\fP is optional for polygons\&. When it is not given, the listed order of the coordinates \fCc\fP establishes the polygon path\&. 
.PP
When \fCe\fP is not specified, it is computed from \fCf\fP using \fBpolytope_faces2edges()\fP iff the line is identified by \fCi\fP\&. 
.RE
.PP

.SS "function polytope_plane (c, f, i, l, cw = \fCtrue\fP)"

.PP
Get a plane for a polytope face\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d coordinate points\&. 
.br
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&.
.br
\fIi\fP <integer> The face specified as an face index\&. 
.br
\fIl\fP <integer-list> The face specified as a list of all the coordinate indexes that define it\&.
.br
\fIcw\fP <boolean> Face vertex ordering\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<plane> \fC[mp, nv]\fP, where \fCmp\fP is \fCcoords-3d\fP, the mean coordinate, and \fCnv\fP is \fCvector-3d\fP, the normal vector, of the polytope face-plane\&.
.RE
.PP
The face can be identified using either parameter \fCi\fP or \fCl\fP\&. When using \fCl\fP, the parameter \fCf\fP is not required\&.
.PP
\fBNote:\fP
.RS 4
Parameter \fCf\fP is optional for polygons\&. When it is not given, the listed order of the coordinates \fCc\fP establishes the polygon path\&. 
.RE
.PP

.SS "function polytope_triangulate_ft (f)"

.PP
Triangulate the faces of a convex polytope using fan triangulation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer-list-3-list> A list of triangular faces that enclose the polytope where each face is a list of three coordinate indexes with vertex ordering is maintained\&.
.RE
.PP
See \fCWikipedia\fP for more information on \fCfan triangulation\fP\&.
.PP
\fBWarning:\fP
.RS 4
This method does not support concave polytopes\&. 
.RE
.PP

.SS "function polytope_vertex_af (f, i)"

.PP
List the adjacent face indexes for a polytope vertex\&. 
.PP
\fBParameters:\fP
.RS 4
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&. 
.br
\fIi\fP <integer> The vertex index\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer-list> The list of face indexes adjacent to the given polytope vertex\&. 
.RE
.PP

.SS "function polytope_vertex_av (f, i)"

.PP
List the adjacent vertices for a given polytope vertex\&. 
.PP
\fBParameters:\fP
.RS 4
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&.
.br
\fIi\fP <integer> A vertex index\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer-list> The list of adjacent vertex indexes for the given vertex index\&.
.RE
.PP
The adjacent vertices are those neighboring vertices that are directly connected to the given vertex by a common edge\&.
.PP
\fBNote:\fP
.RS 4
Parameter \fCf\fP is optional for polygons\&. When it is not given, the listed order of the coordinates \fCc\fP establishes the polygon path\&. 
.RE
.PP

.SS "function polytope_vertex_n (c, f, i)"

.PP
Get a normal vector for a polytope vertex\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP <coords-3d|coords-2d> A list of 3d or 2d coordinate points\&. 
.br
\fIf\fP <integer-list-list> A list of faces (or paths) that enclose the shape where each face is a list of coordinate indexes\&. 
.br
\fIi\fP <integer> The vertex index\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<vector-3d> A normal vector for the polytope vertex\&.
.RE
.PP
The normal is computed as the mean of the adjacent faces\&.
.PP
\fBNote:\fP
.RS 4
Parameter \fCf\fP is optional for polygons\&. When it is not given, the listed order of the coordinates \fCc\fP establishes the polygon path\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for omdl from the source code\&.
