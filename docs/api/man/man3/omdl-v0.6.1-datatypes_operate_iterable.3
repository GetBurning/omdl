.TH "datatypes_operate_iterable" 3 "Fri Apr 7 2017" "Version v0.6.1" "omdl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
datatypes_operate_iterable \- Iterables
.PP
Iterable data type operations\&.  

.SS "Files"

.in +1c
.ti -1c
.RI "file \fBdatatypes-base\&.scad\fP"
.br
.RI "\fIInclude file wrapper of data types base primitives\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "function \fBedefined_or\fP (v, i, d)"
.br
.RI "\fIReturn an iterable element when it exists or a default value when it does not\&. \fP"
.ti -1c
.RI "function \fBfind\fP (mv, v, c=1, i, i1=0, i2)"
.br
.RI "\fIFind the occurrences of a match value in an iterable value\&. \fP"
.ti -1c
.RI "function \fBcount\fP (mv, v, s=true, i)"
.br
.RI "\fICount all occurrences of a match value in an iterable value\&. \fP"
.ti -1c
.RI "function \fBexists\fP (mv, v, s=true, i)"
.br
.RI "\fICheck for the existence of a match value in an iterable value\&. \fP"
.ti -1c
.RI "function \fBfirst\fP (v)"
.br
.RI "\fIReturn the first element of an iterable value\&. \fP"
.ti -1c
.RI "function \fBsecond\fP (v)"
.br
.RI "\fIReturn the second element of an iterable value\&. \fP"
.ti -1c
.RI "function \fBthird\fP (v)"
.br
.RI "\fIReturn the third element of an iterable value\&. \fP"
.ti -1c
.RI "function \fBlast\fP (v)"
.br
.RI "\fIReturn the last element of an iterable value\&. \fP"
.ti -1c
.RI "function \fBnfirst\fP (v, n=1)"
.br
.RI "\fIReturn a list containing the first n elements of an iterable value\&. \fP"
.ti -1c
.RI "function \fBnlast\fP (v, n=1)"
.br
.RI "\fIReturn a list containing the last n elements of an iterable value\&. \fP"
.ti -1c
.RI "function \fBnhead\fP (v, n=1)"
.br
.RI "\fIReturn a list containing all but the last n elements of an iterable value\&. \fP"
.ti -1c
.RI "function \fBntail\fP (v, n=1)"
.br
.RI "\fIReturn a list containing all but the first n elements of an iterable value\&. \fP"
.ti -1c
.RI "function \fBreverse\fP (v)"
.br
.RI "\fIReverse the elements of an iterable value\&. \fP"
.ti -1c
.RI "function \fBrselect\fP (v, i)"
.br
.RI "\fISelect a range of elements from an iterable value\&. \fP"
.ti -1c
.RI "function \fBnssequence\fP (v, n=1, s=1, w=false)"
.br
.RI "\fIReturn a list of all n-element sequential-subsets of an iterable value\&. \fP"
.ti -1c
.RI "function \fBeappend\fP (nv, v, r=true, j=true, l=true)"
.br
.RI "\fIAppend a value to each element of an iterable value\&. \fP"
.ti -1c
.RI "function \fBinsert\fP (nv, v, i=0, mv, mi=0, s=true, si)"
.br
.RI "\fIInsert a new value into an iterable value\&. \fP"
.ti -1c
.RI "function \fBdelete\fP (v, i, mv, mc=1, s=true, si)"
.br
.RI "\fIDelete elements from an iterable value\&. \fP"
.ti -1c
.RI "function \fBstrip\fP (v, mv=\fBempty_lst\fP)"
.br
.RI "\fIStrip all matching values from an iterable value\&. \fP"
.ti -1c
.RI "function \fBunique\fP (v)"
.br
.RI "\fIReturn the unique elements of an iterable value\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Iterable data type operations\&. 

See validation \fBresults\fP\&. 
.SH "Function Documentation"
.PP 
.SS "function count (mv, v, s = \fCtrue\fP, i)"

.PP
Count all occurrences of a match value in an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fImv\fP <value> A match value\&. 
.br
\fIv\fP <value> An iterable value\&. 
.br
\fIs\fP <boolean> Use \fCsearch\fP for element matching (assign \fBfalse\fP to use \fBfind()\fP)\&. 
.br
\fIi\fP <integer> The element index to consider for iterable elements\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<integer> The number of times \fCmv\fP occurs in the list\&. 
.RE
.PP

.SS "function delete (v, i, mv, mc = \fC1\fP, s = \fCtrue\fP, si)"

.PP
Delete elements from an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&.
.br
\fIi\fP <range|list|integer> Deletion Indexes\&.
.br
\fImv\fP <list|string|value> Match value candidates\&. 
.br
\fImc\fP <integer> A match count\&. For \fC(mc>=1)\fP, remove the first \fCmc\fP matches\&. For \fC(mc<=0)\fP, remove all matches\&.
.br
\fIs\fP <boolean> Use \fCsearch\fP for element matching (assign \fBfalse\fP to use \fBfind()\fP)\&. 
.br
\fIsi\fP <integer> The element column index when matching\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list with all specified elements removed\&. Returns \fBundef\fP when \fCi\fP does not map to an element of \fCv\fP\&. Returns \fBundef\fP when \fCv\fP is not defined or is not iterable\&.
.RE
.PP
The elements to delete can be specified by an index position, a list of index positions, an index range, an element match value, or a list of element match values (when using \fCsearch\fP)\&. When \fCmv\fP is a list of match values, all values of \fCmv\fP that exists in \fCv\fP are candidates for deletion\&. For each matching candidate, \fCmc\fP indicates the quantity to remove\&. When more than one deletion criteria is specified, the order of precedence is: \fCmv\fP, \fCi\fP\&. 
.SS "function eappend (nv, v, r = \fCtrue\fP, j = \fCtrue\fP, l = \fCtrue\fP)"

.PP
Append a value to each element of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fInv\fP <value> A new value to append\&. 
.br
\fIv\fP <value> An iterable value\&.
.br
\fIr\fP <boolean> Reduce list element value before appending\&. 
.br
\fIj\fP <boolean> Join each appendage as a separate list\&.
.br
\fIl\fP <boolean> Append new value to last element\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list with \fCnv\fP appended to each element of \fCv\fP\&. Returns \fBundef\fP when \fCv\fP is not defined or is not iterable\&.
.RE
.PP
\fBExample\fP 
.PP
.nf
v1=[["a"], ["b"], ["c"], ["d"]];
v2=[1, 2, 3];

echo( eappend( v2, v1 ) );
echo( eappend( v2, v1, r=false ) );
echo( eappend( v2, v1, j=false, l=false ) );

.fi
.PP
.PP
\fBResult\fP 
.PP
.nf
ECHO: [["a", 1, 2, 3], ["b", 1, 2, 3], ["c", 1, 2, 3], ["d", 1, 2, 3]]
ECHO: [[["a"], 1, 2, 3], [["b"], 1, 2, 3], [["c"], 1, 2, 3], [["d"], 1, 2, 3]]
ECHO: ["a", 1, 2, 3, "b", 1, 2, 3, "c", 1, 2, 3, "d"]

.fi
.PP
.PP
\fBNote:\fP
.RS 4
Appending with reduction causes \fCnv\fP to be appended to the \fIelements\fP of each iterable value\&. Otherwise, \fCnv\fP is appended to the iterable value itself\&. 
.RE
.PP

.SS "function edefined_or (v, i, d)"

.PP
Return an iterable element when it exists or a default value when it does not\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&. 
.br
\fIi\fP <integer> An element index\&. 
.br
\fId\fP <value> A default value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<value> \fCv[i]\fP when it is defined or \fCd\fP otherwise\&. 
.RE
.PP

.SS "function exists (mv, v, s = \fCtrue\fP, i)"

.PP
Check for the existence of a match value in an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fImv\fP <value> A match value\&. 
.br
\fIv\fP <value> An iterable value\&. 
.br
\fIs\fP <boolean> Use \fCsearch\fP for element matching (assign \fBfalse\fP to use \fBfind()\fP)\&. 
.br
\fIi\fP <integer> The element index to consider for iterable elements\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<boolean> \fBtrue\fP when \fCmv\fP exists in the list and \fBfalse\fP otherwise\&. 
.RE
.PP

.SS "function find (mv, v, c = \fC1\fP, i, i1 = \fC0\fP, i2)"

.PP
Find the occurrences of a match value in an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fImv\fP <value> A match value\&. 
.br
\fIv\fP <value> An iterable value\&. 
.br
\fIc\fP <integer> A match count\&. For \fC(c>=1)\fP, return the first \fCc\fP matches\&. For \fC(c<=0)\fP, return all matches\&. 
.br
\fIi\fP <integer> The element index to consider for iterable elements\&. 
.br
\fIi1\fP <integer> The element index where find begins (default: first)\&. 
.br
\fIi2\fP <integer> The element index where find ends (default: last)\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list of indexes where elements match \fCmv\fP\&. Returns \fBempty_lst\fP when no element of \fCv\fP matches \fCmv\fP or when \fCv\fP is not iterable\&.
.RE
.PP
The use-cases for \fBfind()\fP and \fCsearch()\fP are summarized in the following tables\&.
.PP
\fBFind:\fP 
.PP
mv / v string list of scalars list of iterables  scalar (a) (b) see note 1 string (c) (b) see note 1 list of scalars (b) see note 1 list of iterables (b) see note 1 \fBSearch:\fP 
.PP
mv / v string list of scalars list of iterables  scalar (a) (b) string (d) invalid (e) see note 2 list of scalars (f) (g) list of iterables (g) \fBKey:\fP 
.PP
.PD 0
.IP "\(bu" 2
(a) Identify each element of \fCv\fP that equals \fCmv\fP\&. 
.IP "\(bu" 2
(b) Identify each element of \fCv\fP where \fCmv\fP equals the element at the specified column index, \fCi\fP, of each iterable value in \fCv\fP\&. 
.IP "\(bu" 2
(c) If, and only if, \fCmv\fP is a single character, identify each character in \fCv\fP that equals \fCmv\fP\&. 
.IP "\(bu" 2
(d) For each character of \fCmv\fP, identify where it exists in \fCv\fP\&. \fBempty_lst\fP is returned for each character of \fCmv\fP absent from \fCv\fP\&. 
.IP "\(bu" 2
(e) For each character of \fCmv\fP, identify where it exists in \fCv\fP either as a numeric value or as a character at the specified column index, \fCi\fP\&. \fBempty_lst\fP is returned for each character of \fCmv\fP absent from \fCv\fP\&. 
.IP "\(bu" 2
(f) For each scalar of \fCmv\fP, identify where it exists in \fCv\fP\&. \fBempty_lst\fP is returned for each scalar of \fCmv\fP absent from \fCv\fP\&. 
.IP "\(bu" 2
(g) For each element of \fCmv\fP, identify where it equals the element at the specified column index, \fCi\fP, of each iterable value in \fCv\fP\&. \fBempty_lst\fP is returned for each element of \fCmv\fP absent from \fCv\fP in the specified column index\&.
.PP
\fBNote:\fP
.RS 4
\fB1\fP: When \fCi\fP is specified, that element column is compared\&. Otherwise, the entire element is compared\&. Functions \fBfind()\fP and \fCsearch()\fP behave differently in this regard\&. 
.PP
\fB2\fP: Invalid use combination when any element of \fCv\fP is a string\&. However, an element that is a list of one or more strings is valid\&. In which case, only the first character of each string element is considered\&. 
.RE
.PP

.SS "function first (v)"

.PP
Return the first element of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<value> The first element of \fCv\fP\&. Returns \fBundef\fP when \fCv\fP is not defined, is not iterable, or is empty\&.
.RE
.PP
\fBNote:\fP
.RS 4
Value may also be a range\&. 
.RE
.PP

.SS "function insert (nv, v, i = \fC0\fP, mv, mi = \fC0\fP, s = \fCtrue\fP, si)"

.PP
Insert a new value into an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fInv\fP <value> A new value to insert\&. 
.br
\fIv\fP <value> An iterable value\&.
.br
\fIi\fP <integer> An insert position index\&.
.br
\fImv\fP <list|string|value> Match value candidates\&. 
.br
\fImi\fP <integer> A match index\&.
.br
\fIs\fP <boolean> Use \fCsearch\fP for element matching (assign \fBfalse\fP to use \fBfind()\fP)\&. 
.br
\fIsi\fP <integer> The element column index when matching\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list with \fCnv\fP inserted into \fCv\fP at the specified position\&. Returns \fBundef\fP when no value of \fCmv\fP exists in \fCv\fP\&. Returns \fBundef\fP when \fC(mi + 1)\fP exceeds the matched element count\&. Returns \fBundef\fP when \fCi\fP does not map to an element of \fCv\fP\&. Returns \fBundef\fP when \fCv\fP is not defined or is not iterable\&.
.RE
.PP
The insert position can be specified by an index, an element match value, or list of potential match values (when using \fCsearch\fP)\&. When multiple matches exists, \fCmi\fP indicates the insert position\&. When more than one insert position criteria is specified, the order of precedence is: \fCmv\fP, \fCi\fP\&. 
.SS "function last (v)"

.PP
Return the last element of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<value> The last element of \fCv\fP\&. Returns \fBundef\fP when \fCv\fP is not defined, is not iterable, or is empty\&. 
.RE
.PP

.SS "function nfirst (v, n = \fC1\fP)"

.PP
Return a list containing the first n elements of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&. 
.br
\fIn\fP <integer> The element count\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list containing the first \fCn\fP elements of \fCv\fP\&. Returns \fBundef\fP when \fCv\fP is not defined, is not iterable, or is empty\&. 
.RE
.PP

.SS "function nhead (v, n = \fC1\fP)"

.PP
Return a list containing all but the last n elements of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&. 
.br
\fIn\fP <integer> The element count\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list containing all but the last \fCn\fP elements of \fCv\fP\&. Returns \fBempty_lst\fP when \fCv\fP contains fewer than \fCn\fP elements\&. Returns \fBundef\fP when \fCv\fP is not defined, is not iterable, or is empty\&. 
.RE
.PP

.SS "function nlast (v, n = \fC1\fP)"

.PP
Return a list containing the last n elements of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&. 
.br
\fIn\fP <integer> The element count\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list containing the last \fCn\fP elements of \fCv\fP\&. Returns \fBundef\fP when \fCv\fP is not defined, is not iterable, or is empty\&. 
.RE
.PP

.SS "function nssequence (v, n = \fC1\fP, s = \fC1\fP, w = \fCfalse\fP)"

.PP
Return a list of all n-element sequential-subsets of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&. 
.br
\fIn\fP <integer> The number of elements for each subset\&. 
.br
\fIs\fP <integer> The iteration step size\&. 
.br
\fIw\fP <boolean> Use wrap-at-end circular subset selection\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list-list> A list of all n-element sequential-subsets of \fCv\fP skipping \fCs\fP elements between each subset selection\&. Returns \fBempty_lst\fP when \fCv\fP is empty, is not defined or is not iterable\&.
.RE
.PP
\fBExample\fP 
.PP
.nf
v = [1, 2, 3, 4];

nssequence( v, 3, 1, false ); // [ [1,2,3], [2,3,4] ]
nssequence( v, 3, 1, true );  // [ [1,2,3], [2,3,4], [3,4,1], [4,1,2] ]

.fi
.PP
 
.SS "function ntail (v, n = \fC1\fP)"

.PP
Return a list containing all but the first n elements of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&. 
.br
\fIn\fP <integer> The element count\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list containing all but the first n elements of \fCv\fP\&. Returns \fBempty_lst\fP when \fCv\fP contains fewer than \fCn\fP elements\&. Returns \fBundef\fP when \fCv\fP is not defined, is not iterable, or is empty\&. 
.RE
.PP

.SS "function reverse (v)"

.PP
Reverse the elements of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list containing the elements of \fCv\fP in reversed order\&. Returns \fBempty_lst\fP when \fCv\fP is empty\&. Returns \fBundef\fP when \fCv\fP is not defined or is not iterable\&. 
.RE
.PP

.SS "function rselect (v, i)"

.PP
Select a range of elements from an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&. 
.br
\fIi\fP <range|list|integer> The index selection\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list containing the identified element(s)\&. Returns \fBundef\fP when \fCi\fP does not map to an element of \fCv\fP\&. Returns \fBempty_lst\fP when \fCv\fP is empty\&. Returns \fBundef\fP when \fCv\fP is not defined or is not iterable\&. 
.RE
.PP

.SS "function second (v)"

.PP
Return the second element of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<value> The second element of \fCv\fP\&. Returns \fBundef\fP when \fCv\fP is not defined, is not iterable, or is empty\&.
.RE
.PP
\fBNote:\fP
.RS 4
Value may also be a range\&. 
.RE
.PP

.SS "function strip (v, mv = \fC\fBempty_lst\fP\fP)"

.PP
Strip all matching values from an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&. 
.br
\fImv\fP <value> The match value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list with all elements equal to \fCmv\fP removed\&. Returns \fBundef\fP when \fCv\fP is not defined or is not iterable\&. 
.RE
.PP

.SS "function third (v)"

.PP
Return the third element of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<value> The second element of \fCv\fP\&. Returns \fBundef\fP when \fCv\fP is not defined, is not iterable, or is empty\&.
.RE
.PP
\fBNote:\fP
.RS 4
Value may also be a range\&. 
.RE
.PP

.SS "function unique (v)"

.PP
Return the unique elements of an iterable value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP <value> An iterable value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<list> A list of unique elements with order preserved\&. Returns \fBundef\fP when \fCv\fP is not defined or is not iterable\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for omdl from the source code\&.
