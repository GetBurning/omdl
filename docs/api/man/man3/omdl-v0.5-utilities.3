.TH "utilities" 3 "Sat Feb 4 2017" "Version v0.5" "omdl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
utilities \- Utilities
.PP
General utilities\&.  

.SS "Files"

.in +1c
.ti -1c
.RI "file \fButilities\&.scad\fP"
.br
.RI "\fIMiscellaneous utilities\&. \fP"
.ti -1c
.RI "file \fBvalidation\&.scad\fP"
.br
.RI "\fIResult validation functions\&. \fP"
.in -1c
.in +1c
.ti -1c
.RI "function \fBstack\fP (b=0, t=0)"
.br
.RI "\fIFormat the function call stack as a string\&. \fP"
.in -1c
.in +1c
.ti -1c
.RI "function \fBvalidate\fP (d, cv, t, ev, p=4, pf=false)"
.br
.RI "\fICompare a computed test value with an known good result\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
General utilities\&. 


.SH "Function Documentation"
.PP 
.SS "function stack (b = \fC0\fP, t = \fC0\fP)"

.PP
Format the function call stack as a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP <decimal> The stack index bottom offset\&. Include function names above this offset\&. 
.br
\fIt\fP <decimal> The stack index top offset\&. Include function names below this offset\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<string> A colon-separated list of functions names for the current function call stack\&.
.RE
.PP
\fBNote:\fP
.RS 4
Returns \fBundef\fP when \fCb\fP is greater than the current number of function instances (ie: \fCbo > $parent_modules-1\fP)\&. 
.PP
Returns the string \fC'root()'\fP when the function call stack is empty (ie: at the root of the script)\&. 
.RE
.PP

.SS "function validate (d, cv, t, ev, p = \fC4\fP, pf = \fCfalse\fP)"

.PP
Compare a computed test value with an known good result\&. 
.PP
\fBParameters:\fP
.RS 4
\fId\fP <string> A description\&. 
.br
\fIcv\fP <value> A computed value to validate\&. 
.br
\fIt\fP <string|boolean> The validation type\&. 
.br
\fIev\fP <value> The expected good value\&.
.br
\fIp\fP <number> A numerical precision for approximate comparisons\&.
.br
\fIpf\fP <boolean> Result reported as a pass or fail boolean value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
<string|boolean> Validation result indicating if the test passed or failed\&.
.RE
.PP
validation types pass if (else fail)  'almost' \fCcv\fP almost equals \fCev\fP 'equals' \fCcv\fP equals \fCev\fP 'not' \fCcv\fP not equal to \fCev\fP 'true' | \fBtrue\fP \fCcv\fP is \fBtrue\fP 'false' | \fBfalse\fP \fCcv\fP is \fBfalse\fP \fBExample\fP 
.PP
 
.PP
.nf
1     use <validation\&.scad>;
2     use <console\&.scad>;
3 
4     //
5     // function to validate
6     //
7     function f1( x ) = (x == undef) ? 1 : 2;
8 
9     farg = undef;     // function test argument
10     erv1 = 1;         // correct expected function result
11     erv2 = 3;         // incorrect expected function result
12 
13     //
14     // pass test example
15     //
16     pass_result = validate("test-a f1(farg)", f1(farg), "equals", erv1);
17 
18     if ( !validate(cv=f1(farg), t="equals", ev=erv1, pf=true) )
19       log_warn( pass_result );
20     else
21       log_info( pass_result );
22 
23     //
24     // fail test example
25     //
26     fail_result = validate("test-b f1(farg)", f1(farg), "equals", erv2);
27 
28     if ( !validate(cv=f1(farg), t="equals", ev=erv2, pf=true) )
29       log_warn( fail_result );
30     else
31       log_info( fail_result );
32 
33     //
34     // almost equal test example
35     //
36     tvae1 = [[90\&.001], [[45\&.009], true]];
37     tvae2 = [[90\&.002], [[45\&.010], true]];
38 
39     log_info( validate("test-c", tvae1, "almost", tvae2, 3) );
40     log_warn( validate("test-d", tvae1, "almost", tvae2, 4) );

.fi
.PP
.PP
\fBResult\fP 
.PP
.nf
1 ECHO: "[ INFO ] root(); passed: 'test-a f1(farg)'"
2 ECHO: 
3 ECHO: "root()"
4 ECHO: "##########################################################################"
5 ECHO: "# [ WARNING ] FAILED: 'test-b f1(farg)'\&.  Got '1'\&. Expected to equal '3' #"
6 ECHO: "##########################################################################"
7 ECHO: "[ INFO ] root(); passed: 'test-c'"
8 ECHO: 
9 ECHO: "root()"
10 ECHO: "#########################################################################################################################################"
11 ECHO: "# [ WARNING ] FAILED: 'test-d'\&.  Got '[[90\&.001], [[45\&.009], true]]'\&. Expected to almost equal '[[90\&.002], [[45\&.01], true]]' to 4 digits #"
12 ECHO: "#########################################################################################################################################"

.fi
.PP
.PP
\fBNote:\fP
.RS 4
When performing an almost equal validation type, the comparison precision is controlled by \fCp\fP\&. This specifies the number of digits of precision for each numerical comparison\&. A passing result indicates that \fCcv\fP equals \fCev\fP to the number of decimal digits specified by \fCp\fP\&. The comparison is performed by the function \fBalmost_equal\fP\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for omdl from the source code\&.
