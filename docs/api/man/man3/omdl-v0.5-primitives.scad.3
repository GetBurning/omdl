.TH "primitives.scad" 3 "Sat Feb 4 2017" "Version v0.5" "omdl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
primitives.scad \- Mathematical primitive functions\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <constants\&.scad>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "function \fBis_defined\fP (v)"
.br
.RI "\fITest if a value is defined\&. \fP"
.ti -1c
.RI "function \fBnot_defined\fP (v)"
.br
.RI "\fITest if a value is not defined\&. \fP"
.ti -1c
.RI "function \fBis_empty\fP (v)"
.br
.RI "\fITest if an iterable value is empty\&. \fP"
.ti -1c
.RI "function \fBis_scalar\fP (v)"
.br
.RI "\fITest if a value is a single non-iterable value\&. \fP"
.ti -1c
.RI "function \fBis_iterable\fP (v)"
.br
.RI "\fITest if a value has multiple parts and is iterable\&. \fP"
.ti -1c
.RI "function \fBis_string\fP (v)"
.br
.RI "\fITest if a value is a string\&. \fP"
.ti -1c
.RI "function \fBis_vector\fP (v)"
.br
.RI "\fITest if a value is a vector\&. \fP"
.ti -1c
.RI "function \fBis_boolean\fP (v)"
.br
.RI "\fITest if a value is a boolean constant\&. \fP"
.ti -1c
.RI "function \fBis_integer\fP (v)"
.br
.RI "\fITest if a value is an integer\&. \fP"
.ti -1c
.RI "function \fBis_decimal\fP (v)"
.br
.RI "\fITest if a value is a decimal\&. \fP"
.ti -1c
.RI "function \fBis_number\fP (v)"
.br
.RI "\fITest if a value is a number\&. \fP"
.ti -1c
.RI "function \fBis_range\fP (v)"
.br
.RI "\fITest if a value is a range definition\&. \fP"
.ti -1c
.RI "function \fBis_nan\fP (v)"
.br
.RI "\fITest if a numerical value is invalid\&. \fP"
.ti -1c
.RI "function \fBis_inf\fP (v)"
.br
.RI "\fITest if a numerical value is infinite\&. \fP"
.ti -1c
.RI "function \fBis_even\fP (v)"
.br
.RI "\fITest if a numerical value is even\&. \fP"
.ti -1c
.RI "function \fBis_odd\fP (v)"
.br
.RI "\fITest if a numerical value is odd\&. \fP"
.ti -1c
.RI "function \fBall_equal\fP (v, cv)"
.br
.RI "\fITest if all elements of a value equal a comparison value\&. \fP"
.ti -1c
.RI "function \fBany_equal\fP (v, cv)"
.br
.RI "\fITest if any element of a value equals a comparison value\&. \fP"
.ti -1c
.RI "function \fBall_defined\fP (v)"
.br
.RI "\fITest if no element of a value is undefined\&. \fP"
.ti -1c
.RI "function \fBany_undefined\fP (v)"
.br
.RI "\fITest if any element of a value is undefined\&. \fP"
.ti -1c
.RI "function \fBall_scalars\fP (v)"
.br
.RI "\fITest if all elements of a value are scalars\&. \fP"
.ti -1c
.RI "function \fBall_vectors\fP (v)"
.br
.RI "\fITest if all elements of a value are vectors\&. \fP"
.ti -1c
.RI "function \fBall_strings\fP (v)"
.br
.RI "\fITest if all elements of a value are strings\&. \fP"
.ti -1c
.RI "function \fBall_numbers\fP (v)"
.br
.RI "\fITest if all elements of a value are numbers\&. \fP"
.ti -1c
.RI "function \fBall_len\fP (v, l)"
.br
.RI "\fITest if all elements of a value have a given length\&. \fP"
.ti -1c
.RI "function \fBalmost_equal\fP (v1, v2, p=4)"
.br
.RI "\fITest if all elements of two values are approximately equal\&. \fP"
.ti -1c
.RI "function \fBcompare\fP (v1, v2, s=true)"
.br
.RI "\fICompare any two values (may be iterable and/or of different types)\&. \fP"
.ti -1c
.RI "function \fBconsts\fP (l, v)"
.br
.RI "\fICreate a vector of constant elements\&. \fP"
.ti -1c
.RI "function \fBvstr\fP (v)"
.br
.RI "\fIConvert all vector elements to strings and concatenate\&. \fP"
.ti -1c
.RI "function \fBsum\fP (v, i1, i2)"
.br
.RI "\fICompute the sum of a vector of numbers\&. \fP"
.ti -1c
.RI "function \fBfind\fP (mv, v, c=1, i, i1=0, i2)"
.br
.RI "\fIFind the occurrences of a match value in an iterable value\&. \fP"
.ti -1c
.RI "function \fBcount\fP (mv, v, s=true, i)"
.br
.RI "\fICount all occurrences of a match value in an iterable value\&. \fP"
.ti -1c
.RI "function \fBexists\fP (mv, v, s=true, i)"
.br
.RI "\fICheck the existence of a match value in an iterable value\&. \fP"
.ti -1c
.RI "function \fBdefined_or\fP (v, d)"
.br
.RI "\fIReturn a defined or default value\&. \fP"
.ti -1c
.RI "function \fBedefined_or\fP (v, i, d)"
.br
.RI "\fIReturn a defined vector element or default value\&. \fP"
.ti -1c
.RI "function \fBfirst\fP (v)"
.br
.RI "\fIReturn the first element of an iterable value\&. \fP"
.ti -1c
.RI "function \fBsecond\fP (v)"
.br
.RI "\fIReturn the second element of an iterable value\&. \fP"
.ti -1c
.RI "function \fBlast\fP (v)"
.br
.RI "\fIReturn the last element of an iterable value\&. \fP"
.ti -1c
.RI "function \fBnfirst\fP (v, n=1)"
.br
.RI "\fIReturn a vector containing the first n elements of an iterable value\&. \fP"
.ti -1c
.RI "function \fBnlast\fP (v, n=1)"
.br
.RI "\fIReturn a vector containing the last n elements of an iterable value\&. \fP"
.ti -1c
.RI "function \fBnhead\fP (v, n=1)"
.br
.RI "\fIReturn a vector containing all but the last n elements of an iterable value\&. \fP"
.ti -1c
.RI "function \fBntail\fP (v, n=1)"
.br
.RI "\fIReturn a vector containing all but the first n elements of an iterable value\&. \fP"
.ti -1c
.RI "function \fBrselect\fP (v, i)"
.br
.RI "\fISelect a range of elements from an iterable value\&. \fP"
.ti -1c
.RI "function \fBeselect\fP (v, f=true, l=false, i)"
.br
.RI "\fISelect an element from each iterable value\&. \fP"
.ti -1c
.RI "function \fBciselect\fP (v, i)"
.br
.RI "\fICase-like select a value from a vector of ordered options by index\&. \fP"
.ti -1c
.RI "function \fBcmvselect\fP (v, mv)"
.br
.RI "\fICase-like select a value from a vector of identified options by match-value\&. \fP"
.ti -1c
.RI "function \fBsmerge\fP (v, r=false)"
.br
.RI "\fISerial-merge vectors of iterable values\&. \fP"
.ti -1c
.RI "function \fBpmerge\fP (v, j=true)"
.br
.RI "\fIParallel-merge vectors of iterable values\&. \fP"
.ti -1c
.RI "function \fBreverse\fP (v)"
.br
.RI "\fIReverse the elements of an iterable value\&. \fP"
.ti -1c
.RI "function \fBqsort\fP (v, r=false)"
.br
.RI "\fISort the numeric or string elements of a vector using quick sort\&. \fP"
.ti -1c
.RI "function \fBqsort2\fP (v, d=0, r=false, s=true)"
.br
.RI "\fIHierarchically sort all elements of a vector using quick sort\&. \fP"
.ti -1c
.RI "function \fBstrip\fP (v, mv=\fBempty_v\fP)"
.br
.RI "\fIStrip all matching values from an iterable value\&. \fP"
.ti -1c
.RI "function \fBeappend\fP (nv, v, r=true, j=true, l=true)"
.br
.RI "\fIAppend a value to each element of an iterable value\&. \fP"
.ti -1c
.RI "function \fBinsert\fP (nv, v, i=0, mv, mi=0, s=true, si)"
.br
.RI "\fIInsert a new value into an iterable value\&. \fP"
.ti -1c
.RI "function \fBdelete\fP (v, i, mv, mc=1, s=true, si)"
.br
.RI "\fIDelete elements from an iterable value\&. \fP"
.ti -1c
.RI "function \fBunique\fP (v)"
.br
.RI "\fIReturn the unique elements of an iterable value\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Mathematical primitive functions\&. 


.PP
\fBAuthor:\fP
.RS 4
Roy Allen Sutton 
.RE
.PP
\fBDate:\fP
.RS 4
2015-2017
.RE
.PP
\fBCopyright:\fP
.RS 4
.RE
.PP
This file is part of \fComdl\fP, an OpenSCAD mechanical design library\&.
.PP
The \fIomdl\fP is free software; you can redistribute it and/or modify it under the terms of the \fCGNU Lesser General Public License\fP as published by the Free Software Foundation; either version 2\&.1 of the License, or (at your option) any later version\&.
.PP
The \fIomdl\fP is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\&. See the GNU Lesser General Public License for more details\&.
.PP
You should have received a copy of the GNU Lesser General Public License along with the \fIomdl\fP; if not, write to the Free Software Foundation, Inc\&., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA; or see http://www.gnu.org/licenses/\&.
.PP
\fBNote:\fP
.RS 4
Include this library file using the \fBinclude\fP statement\&. 
.RE
.PP

.PP
Definition in file \fBprimitives\&.scad\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for omdl from the source code\&.
