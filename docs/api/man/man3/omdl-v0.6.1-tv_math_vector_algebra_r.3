.TH "tv_math_vector_algebra_r" 3 "Fri Apr 7 2017" "Version v0.6.1" "omdl" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tv_math_vector_algebra_r \- Results 

.PP
.nf
1 ECHO: "OpenSCAD Version [2017, 2, 19]"
2 ECHO: "[ INFO ] run(): test(); t01 passed: 'distance_pp(undef, undef)=~undef'"
3 ECHO: "[ INFO ] run(): test(); t02 passed: 'distance_pp([], [])=~undef'"
4 ECHO: "[ INFO ] run(): test(); t03 passed: 'distance_pp(60, 50)=~10'"
5 ECHO: "[ INFO ] run(): test(); t04 passed: 'distance_pp([99], [58])=~41'"
6 ECHO: "[ INFO ] run(): test(); t05 passed: 'distance_pp([99, 2], [58, 16])=~43\&.3244'"
7 ECHO: "[ INFO ] run(): test(); t06 passed: 'distance_pp([199, 20, 55], [158, 116, 75])=~106\&.287'"
8 ECHO: "[ INFO ] run(): test(); t07 passed: 'distance_pp([169, 27, 35, 10], [178, 16, 25, 20])=~20\&.0499'"
9 ECHO: "[ INFO ] run(): test(); t08 passed: 'distance_pp([1, 0, 0], [0, 1, 0])=~1\&.4142'"
10 ECHO: "[ INFO ] run(): test(); t09 passed: 'distance_pp([1, 0, 0], [0, 1, 0])=~1\&.4142'"
11 ECHO: "[ INFO ] run(): test(); t01 passed: 'is_left_ppp(undef, undef, undef)=~undef'"
12 ECHO: "[ INFO ] run(): test(); t02 passed: 'is_left_ppp([], [], [])=~undef'"
13 ECHO: "[ INFO ] run(): test(); t03 passed: 'is_left_ppp(60, 50, 40)=~undef'"
14 ECHO: "[ INFO ] run(): test(); t04 passed: 'is_left_ppp([99], [58], [12])=~undef'"
15 ECHO: "[ INFO ] run(): test(); t05 passed: 'is_left_ppp([99, 2], [58, 16], [12, 43])=~-463'"
16 ECHO: "[ INFO ] run(): test(); t06 passed: 'is_left_ppp([199, 20, 55], [158, 116, 75], [12, 43, 90])=~17009'"
17 ECHO: "[ INFO ] run(): test(); t07 passed: 'is_left_ppp([169, 27, 35, 10], [178, 16, 25, 20], [12, 43, 90, 30])=~-1583'"
18 ECHO: "[ INFO ] run(): test(); t08 passed: 'is_left_ppp([1, 0, 0], [0, 1, 0], [0, 0, 1])=~1'"
19 ECHO: "[ INFO ] run(): test(); t09 passed: 'is_left_ppp([1, 0, 0], [0, 1, 0], [2, 2, 0])=~-3'"
20 ECHO: "[ INFO ] run(): test(); t01 passed: 'dimension_2to3_v(undef)=~[undef, undef, 0]'"
21 ECHO: "[ INFO ] run(): test(); t02 passed: 'dimension_2to3_v([])=~[undef, undef, 0]'"
22 ECHO: "[ INFO ] run(): test(); t03 passed: 'dimension_2to3_v(60)=~[undef, undef, 0]'"
23 ECHO: "[ INFO ] run(): test(); t04 passed: 'dimension_2to3_v([99])=~[99, undef, 0]'"
24 ECHO: "[ INFO ] run(): test(); t05 passed: 'dimension_2to3_v([99, 2])=~[99, 2, 0]'"
25 ECHO: "[ INFO ] run(): test(); t06 passed: 'dimension_2to3_v([199, 20, 55])=~[199, 20, 55]'"
26 ECHO: "[ INFO ] run(): test(); t07 passed: 'dimension_2to3_v([169, 27, 35, 10])=~[169, 27, 0]'"
27 ECHO: "[ INFO ] run(): test(); t08 passed: 'dimension_2to3_v([1, 0, 0])=~[1, 0, 0]'"
28 ECHO: "[ INFO ] run(): test(); t09 passed: 'dimension_2to3_v([1, 0, 0])=~[1, 0, 0]'"
29 ECHO: "[ INFO ] run(): test(); t01 passed: 'get_line_dim([undef, undef])=~2'"
30 ECHO: "[ INFO ] run(): test(); t02 passed: 'get_line_dim([[], []])=~0'"
31 ECHO: "[ INFO ] run(): test(); t03 passed: 'get_line_dim([60, 50])=~2'"
32 ECHO: "[ INFO ] run(): test(); t04 passed: 'get_line_dim([[99], [58]])=~1'"
33 ECHO: "[ INFO ] run(): test(); t05 passed: 'get_line_dim([[99, 2], [58, 16]])=~2'"
34 ECHO: "[ INFO ] run(): test(); t06 passed: 'get_line_dim([[199, 20, 55], [158, 116, 75]])=~3'"
35 ECHO: "[ INFO ] run(): test(); t07 passed: 'get_line_dim([[169, 27, 35, 10], [178, 16, 25, 20]])=~4'"
36 ECHO: "[ INFO ] run(): test(); t08 passed: 'get_line_dim([[1, 0, 0], [0, 1, 0]])=~3'"
37 ECHO: "[ INFO ] run(): test(); t09 passed: 'get_line_dim([[1, 0, 0], [0, 1, 0]])=~3'"
38 ECHO: "[ INFO ] run(): test(); t01 passed: 'get_line_tp([undef, undef])=~[undef, undef]'"
39 ECHO: "[ INFO ] run(): test(); t02 passed: 'get_line_tp([[], []])=~[]'"
40 ECHO: "[ INFO ] run(): test(); t03 passed: 'get_line_tp([60, 50])=~[60, 50]'"
41 ECHO: "[ INFO ] run(): test(); t04 passed: 'get_line_tp([[99], [58]])=~[58]'"
42 ECHO: "[ INFO ] run(): test(); t05 passed: 'get_line_tp([[99, 2], [58, 16]])=~[58, 16]'"
43 ECHO: "[ INFO ] run(): test(); t06 passed: 'get_line_tp([[199, 20, 55], [158, 116, 75]])=~[158, 116, 75]'"
44 ECHO: "[ INFO ] run(): test(); t07 passed: 'get_line_tp([[169, 27, 35, 10], [178, 16, 25, 20]])=~[178, 16, 25, 20]'"
45 ECHO: "[ INFO ] run(): test(); t08 passed: 'get_line_tp([[1, 0, 0], [0, 1, 0]])=~[0, 1, 0]'"
46 ECHO: "[ INFO ] run(): test(); t09 passed: 'get_line_tp([[1, 0, 0], [0, 1, 0]])=~[0, 1, 0]'"
47 ECHO: "[ INFO ] run(): test(); t01 passed: 'get_line_ip([undef, undef])=~[0, 0]'"
48 ECHO: "[ INFO ] run(): test(); t02 passed: 'get_line_ip([[], []])=~[]'"
49 ECHO: "[ INFO ] run(): test(); t03 passed: 'get_line_ip([60, 50])=~[0, 0]'"
50 ECHO: "[ INFO ] run(): test(); t04 passed: 'get_line_ip([[99], [58]])=~[99]'"
51 ECHO: "[ INFO ] run(): test(); t05 passed: 'get_line_ip([[99, 2], [58, 16]])=~[99, 2]'"
52 ECHO: "[ INFO ] run(): test(); t06 passed: 'get_line_ip([[199, 20, 55], [158, 116, 75]])=~[199, 20, 55]'"
53 ECHO: "[ INFO ] run(): test(); t07 passed: 'get_line_ip([[169, 27, 35, 10], [178, 16, 25, 20]])=~[169, 27, 35, 10]'"
54 ECHO: "[ INFO ] run(): test(); t08 passed: 'get_line_ip([[1, 0, 0], [0, 1, 0]])=~[1, 0, 0]'"
55 ECHO: "[ INFO ] run(): test(); t09 passed: 'get_line_ip([[1, 0, 0], [0, 1, 0]])=~[1, 0, 0]'"
56 ECHO: "[ INFO ] run(): test(); t01 passed: 'get_line2origin([undef, undef])=~[undef, undef]'"
57 ECHO: "[ INFO ] run(): test(); t02 passed: 'get_line2origin([[], []])=~[]'"
58 ECHO: "[ INFO ] run(): test(); t03 passed: 'get_line2origin([60, 50])=~[60, 50]'"
59 ECHO: "[ INFO ] run(): test(); t04 passed: 'get_line2origin([[99], [58]])=~[-41]'"
60 ECHO: "[ INFO ] run(): test(); t05 passed: 'get_line2origin([[99, 2], [58, 16]])=~[-41, 14]'"
61 ECHO: "[ INFO ] run(): test(); t06 passed: 'get_line2origin([[199, 20, 55], [158, 116, 75]])=~[-41, 96, 20]'"
62 ECHO: "[ INFO ] run(): test(); t07 passed: 'get_line2origin([[169, 27, 35, 10], [178, 16, 25, 20]])=~[9, -11, -10, 10]'"
63 ECHO: "[ INFO ] run(): test(); t08 passed: 'get_line2origin([[1, 0, 0], [0, 1, 0]])=~[-1, 1, 0]'"
64 ECHO: "[ INFO ] run(): test(); t09 passed: 'get_line2origin([[1, 0, 0], [0, 1, 0]])=~[-1, 1, 0]'"
65 ECHO: "[ INFO ] run(): test(); t01 passed: 'dot_ll([undef, undef], [undef, undef])=~undef'"
66 ECHO: "[ INFO ] run(): test(); t02 passed: 'dot_ll([[], []], [[], []])=~undef'"
67 ECHO: "[ INFO ] run(): test(); t03 passed: 'dot_ll([60, 50], [40, 30])=~3900'"
68 ECHO: "[ INFO ] run(): test(); t04 passed: 'dot_ll([[99], [58]], [[12], [42]])=~-1230'"
69 ECHO: "[ INFO ] run(): test(); t05 passed: 'dot_ll([[99, 2], [58, 16]], [[12, 43], [42, 13]])=~-1650'"
70 ECHO: "[ INFO ] run(): test(); t06 passed: 'dot_ll([[199, 20, 55], [158, 116, 75]], [[12, 43, 90], [42, 13, 34]])=~-5230'"
71 ECHO: "[ INFO ] run(): test(); t07 passed: 'dot_ll([[169, 27, 35, 10], [178, 16, 25, 20]], [[12, 43, 90, 30], [42, 13, 34, 60]])=~1460'"
72 ECHO: "[ INFO ] run(): test(); t08 passed: 'dot_ll([[1, 0, 0], [0, 1, 0]], [[0, 0, 1], [-1, 0, 0]])=~1'"
73 ECHO: "[ INFO ] run(): test(); t09 passed: 'dot_ll([[1, 0, 0], [0, 1, 0]], [[2, 2, 0], [0, 0, 0]])=~0'"
74 ECHO: "[ INFO ] run(); *skip*: t01 'cross_ll(All undefined)'"
75 ECHO: "[ INFO ] run(); *skip*: t02 'cross_ll(All empty lists)'"
76 ECHO: "[ INFO ] run(); *skip*: t03 'cross_ll(All scalars)'"
77 ECHO: "[ INFO ] run(); *skip*: t04 'cross_ll(All 1d vectors)'"
78 ECHO: "[ INFO ] run(): test(); t05 passed: 'cross_ll([[99, 2], [58, 16]], [[12, 43], [42, 13]])=~810'"
79 ECHO: "[ INFO ] run(): test(); t06 passed: 'cross_ll([[199, 20, 55], [158, 116, 75]], [[12, 43, 90], [42, 13, 34]])=~[-4776, -1696, -1650]'"
80 ECHO: "[ INFO ] run(); *skip*: t07 'cross_ll(All 4d vectors)'"
81 ECHO: "[ INFO ] run(): test(); t08 passed: 'cross_ll([[1, 0, 0], [0, 1, 0]], [[0, 0, 1], [-1, 0, 0]])=~[-1, -1, 1]'"
82 ECHO: "[ INFO ] run(): test(); t09 passed: 'cross_ll([[1, 0, 0], [0, 1, 0]], [[2, 2, 0], [0, 0, 0]])=~[0, 0, 4]'"
83 ECHO: "[ INFO ] run(); *skip*: t01 'striple_lll(All undefined)'"
84 ECHO: "[ INFO ] run(); *skip*: t02 'striple_lll(All empty lists)'"
85 ECHO: "[ INFO ] run(); *skip*: t03 'striple_lll(All scalars)'"
86 ECHO: "[ INFO ] run(); *skip*: t04 'striple_lll(All 1d vectors)'"
87 ECHO: "[ INFO ] run(): test(); t05 passed: 'striple_lll([[99, 2], [58, 16]], [[12, 43], [42, 13]], [[15, 59], [1, 85]])=~[-14760, 5040]'"
88 ECHO: "[ INFO ] run(): test(); t06 passed: 'striple_lll([[199, 20, 55], [158, 116, 75]], [[12, 43, 90], [42, 13, 34]], [[15, 59, 45], [62, 33, 69]])=~-219976'"
89 ECHO: "[ INFO ] run(); *skip*: t07 'striple_lll(All 4d vectors)'"
90 ECHO: "[ INFO ] run(): test(); t08 passed: 'striple_lll([[1, 0, 0], [0, 1, 0]], [[0, 0, 1], [-1, 0, 0]], [[0, -1, 0], [0, 0, -1]])=~-2'"
91 ECHO: "[ INFO ] run(): test(); t09 passed: 'striple_lll([[1, 0, 0], [0, 1, 0]], [[2, 2, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]])=~0'"
92 ECHO: "[ INFO ] run(): test(); t01 passed: 'angle_ll([undef, undef], [undef, undef])=~undef'"
93 ECHO: "[ INFO ] run(): test(); t02 passed: 'angle_ll([[], []], [[], []])=~undef'"
94 ECHO: "[ INFO ] run(): test(); t03 passed: 'angle_ll([60, 50], [40, 30])=~-2\&.9357'"
95 ECHO: "[ INFO ] run(): test(); t04 passed: 'angle_ll([[99], [58]], [[12], [42]])=~undef'"
96 ECHO: "[ INFO ] run(): test(); t05 passed: 'angle_ll([[99, 2], [58, 16]], [[12, 43], [42, 13]])=~153\&.853'"
97 ECHO: "[ INFO ] run(): test(); t06 passed: 'angle_ll([[199, 20, 55], [158, 116, 75]], [[12, 43, 90], [42, 13, 34]])=~134\&.457'"
98 ECHO: "[ INFO ] run(): test(); t07 passed: 'angle_ll([[169, 27, 35, 10], [178, 16, 25, 20]], [[12, 43, 90, 30], [42, 13, 34, 60]])=~undef'"
99 ECHO: "[ INFO ] run(): test(); t08 passed: 'angle_ll([[1, 0, 0], [0, 1, 0]], [[0, 0, 1], [-1, 0, 0]])=~60'"
100 ECHO: "[ INFO ] run(): test(); t09 passed: 'angle_ll([[1, 0, 0], [0, 1, 0]], [[2, 2, 0], [0, 0, 0]])=~90'"
101 ECHO: "[ INFO ] run(); *skip*: t01 'angle_lll(All undefined)'"
102 ECHO: "[ INFO ] run(); *skip*: t02 'angle_lll(All empty lists)'"
103 ECHO: "[ INFO ] run(); *skip*: t03 'angle_lll(All scalars)'"
104 ECHO: "[ INFO ] run(); *skip*: t04 'angle_lll(All 1d vectors)'"
105 ECHO: "[ INFO ] run(); *skip*: t05 'angle_lll(All 2d vectors)'"
106 ECHO: "[ INFO ] run(): test(); t06 passed: 'angle_lll([[199, 20, 55], [158, 116, 75]], [[12, 43, 90], [42, 13, 34]], [[15, 59, 45], [62, 33, 69]])=~-91\&.362'"
107 ECHO: "[ INFO ] run(); *skip*: t07 'angle_lll(All 4d vectors)'"
108 ECHO: "[ INFO ] run(): test(); t08 passed: 'angle_lll([[1, 0, 0], [0, 1, 0]], [[0, 0, 1], [-1, 0, 0]], [[0, -1, 0], [0, 0, -1]])=~-63\&.4349'"
109 ECHO: "[ INFO ] run(): test(); t09 passed: 'angle_lll([[1, 0, 0], [0, 1, 0]], [[2, 2, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]])=~0'"
110 ECHO: "[ INFO ] run(): test(); t01 passed: 'unit_l([undef, undef])=~undef'"
111 ECHO: "[ INFO ] run(): test(); t02 passed: 'unit_l([[], []])=~undef'"
112 ECHO: "[ INFO ] run(): test(); t03 passed: 'unit_l([60, 50])=~[0\&.7682, 0\&.6402]'"
113 ECHO: "[ INFO ] run(): test(); t04 passed: 'unit_l([[99], [58]])=~[-1]'"
114 ECHO: "[ INFO ] run(): test(); t05 passed: 'unit_l([[99, 2], [58, 16]])=~[-0\&.9464, 0\&.3231]'"
115 ECHO: "[ INFO ] run(): test(); t06 passed: 'unit_l([[199, 20, 55], [158, 116, 75]])=~[-0\&.3857, 0\&.9032, 0\&.1882]'"
116 ECHO: "[ INFO ] run(): test(); t07 passed: 'unit_l([[169, 27, 35, 10], [178, 16, 25, 20]])=~[0\&.44888, -0\&.5486, -0\&.4988, 0\&.4988]'"
117 ECHO: "[ INFO ] run(): test(); t08 passed: 'unit_l([[1, 0, 0], [0, 1, 0]])=~[-0\&.7071, 0\&.7071, 0]'"
118 ECHO: "[ INFO ] run(): test(); t09 passed: 'unit_l([[1, 0, 0], [0, 1, 0]])=~[-0\&.7071, 0\&.7071, 0]'"
119 ECHO: "[ INFO ] run(); *skip*: t01 'are_coplanar_lll(All undefined)'"
120 ECHO: "[ INFO ] run(); *skip*: t02 'are_coplanar_lll(All empty lists)'"
121 ECHO: "[ INFO ] run(); *skip*: t03 'are_coplanar_lll(All scalars)'"
122 ECHO: "[ INFO ] run(); *skip*: t04 'are_coplanar_lll(All 1d vectors)'"
123 ECHO: "[ INFO ] run(); *skip*: t05 'are_coplanar_lll(All 2d vectors)'"
124 ECHO: "[ INFO ] run(): test(); t06 passed: 'are_coplanar_lll([[199, 20, 55], [158, 116, 75]], [[12, 43, 90], [42, 13, 34]], [[15, 59, 45], [62, 33, 69]])=~false'"
125 ECHO: "[ INFO ] run(); *skip*: t07 'are_coplanar_lll(All 4d vectors)'"
126 ECHO: "[ INFO ] run(): test(); t08 passed: 'are_coplanar_lll([[1, 0, 0], [0, 1, 0]], [[0, 0, 1], [-1, 0, 0]], [[0, -1, 0], [0, 0, -1]])=~false'"
127 ECHO: "[ INFO ] run(): test(); t09 passed: 'are_coplanar_lll([[1, 0, 0], [0, 1, 0]], [[2, 2, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]])=~true'"
128 ECHO: "[ INFO ] run(); *skip*: t01 'get_pnorm2nv(All undefined)'"
129 ECHO: "[ INFO ] run(); *skip*: t02 'get_pnorm2nv(All empty lists)'"
130 ECHO: "[ INFO ] run(): test(); t03 passed: 'get_pnorm2nv([60, 50])=~[60, 50, 0]'"
131 ECHO: "[ INFO ] run(); *skip*: t04 'get_pnorm2nv(All 1d vectors)'"
132 ECHO: "[ INFO ] run(): test(); t05 passed: 'get_pnorm2nv([[99, 2], [58, 16]])=~[0, 0, 1468]'"
133 ECHO: "[ INFO ] run(): test(); t06 passed: 'get_pnorm2nv([[199, 20, 55], [158, 116, 75]])=~[-4880, -6235, 19924]'"
134 ECHO: "[ INFO ] run(); *skip*: t07 'get_pnorm2nv(All 4d vectors)'"
135 ECHO: "[ INFO ] run(): test(); t08 passed: 'get_pnorm2nv([[1, 0, 0], [0, 1, 0]])=~[0, 0, 1]'"
136 ECHO: "[ INFO ] run(): test(); t09 passed: 'get_pnorm2nv([[1, 0, 0], [0, 1, 0]])=~[0, 0, 1]'"

.fi
.PP
 
